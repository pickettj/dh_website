<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
    <!--#set var="title" value="XSLT assignment #4: answers" -->
    <!--#config timefmt="%Y-%m-%dT%X%z" -->
    <head>
        <title><!--#echo var="title" --></title>
        <link rel="stylesheet" type="text/css" href="http://www.obdurodon.org/css/style.css" />
        <!--#include virtual="inc/dh-header.html" -->
        <style type="text/css">
            .note {
              border: 1px gray solid;
              padding: 0 1em;
            }
            body * {
              line-height: 1.5 !important;
            }</style>
    </head>
    <body class="line-numbers">
        <!--#include virtual="inc/dh-boilerplate.html" -->
        <section>
            <h3>The assignment</h3>
            <p>Produce an HTML version of the sonnets with a table of contents at the top. The table
                of contents should have one entry for each sonnet, which gives the number of the
                sonnet and the first line. Below the full table of contents (one line for each
                sonnet) you should render the complete text of all of the sonnets. You can see our
                output at <a href="shakespeare-sonnets.xhtml"
                    >http://dh.obdurodon.org/shakespeare-sonnets.xhtml</a>.</p>
        </section>
        <section>
            <h3>Our solution</h3>
            <pre class="language-xml"><code><![CDATA[<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/1999/xhtml"
  xmlns:math="http://www.w3.org/2005/xpath-functions/math" exclude-result-prefixes="#all"
  version="3.0">
  <xsl:output method="xhtml" html-version="5" omit-xml-declaration="no" include-content-type="no"
    indent="yes"/>
  <xsl:template match="/">
    <html>
      <head>
        <title>Shakespeare Sonnets</title>
      </head>
      <body>
        <h1>Shakespearean Sonnets</h1>
        <section>
          <h2>Contents</h2>
          <ul>
            <xsl:apply-templates select="//sonnet" mode="toc"/>
          </ul>
        </section>
        <hr/>
        <xsl:apply-templates/>
      </body>
    </html>
  </xsl:template>
  <!-- ================================================================== -->
  <!-- toc mode                                                           -->
  <!--                                                                    -->
  <!-- Specify toc mode when applying templates to line to avoid <br/>    -->
  <!-- ================================================================== -->
  <xsl:template match="sonnet" mode="toc">
    <li>
      <xsl:apply-templates select="@number"/>
      <xsl:text>. </xsl:text>
      <xsl:apply-templates select="line[1]" mode="toc"/>
    </li>
  </xsl:template>
  <!-- ================================================================== -->
  <!-- Reading view; no mode                                              -->
  <!-- ================================================================== -->
  <xsl:template match="sonnet">
    <section>
      <h2>
        <xsl:apply-templates select="@number"/>
      </h2>
      <p>
        <xsl:apply-templates/>
      </p>
    </section>
  </xsl:template>
  <xsl:template match="line">
    <xsl:apply-templates/>
    <xsl:if test="following-sibling::line">
      <br/>
    </xsl:if>
  </xsl:template>
</xsl:stylesheet>]]></code></pre>
            <p>We begin with boilerplate configuration: we specify that output will be in the HTML
                namespace with
                <code class="language-xquery">xmlns="http://www.w3.org/1999/xhtml"</code> (line 2)
                and we specify that we want HTML5 output using XML syntax on with lines 5–6.</p>
            <p>The stylesheet we have written accomplishes the task of processing the same element
                (<code class="language-xml">&lt;sonnet&gt;</code>) in more than one way. The first
                template that matches <code class="language-xml">&lt;sonnet&gt;</code> (lines 30–36)
                has a <code class="language-xquery">@mode</code> attribute, which we label
                arbitrarily as <q>toc</q>, indicating that this is the template we want to use when
                generating our <em>t</em>able <em>o</em>f <em>c</em>ontents. We could have given any
                other name to this mode, as long as the value of
                <code class="language-xquery">@mode</code> in our template matched the value of
                <code class="language-xquery">@mode</code> where we applied templates. This template
                is called from inside an HTML unordered, or bulleted, list
                (<code class="language-xml">&lt;ul&gt;</code>, lines 16–18), and the template it
                actually applies creates a list item (<code class="language-xml">&lt;li&gt;</code>)
                for each sonnet. Each of those list items contains the sonnet’s number in roman
                numerals (retrieved from the XML by applying templates to the
                <code class="language-xquery">@number</code> attribute of the
                <code class="language-xml">&lt;sonnet&gt;</code> we’re processing at the moment),
                followed by the text <q>. </q> (that is, a period and a space character), followed
                by the first <code class="language-xml">&lt;line&gt;</code> child of that sonnet,
                which we retrieve by applying templates to that
                <code class="language-xml">&lt;line&gt;</code> also in the <q>toc</q> mode.</p>
            <p>We output the period and space between the roman numeral and the line of text by
                using an <code class="language-xml">&lt;xsl:text&gt;</code> element. We could have
                output the bare text, and in most cases the results will be the same, but outputting
                a mixture of bare text and elements inside a template can sometimes lead to awkward
                white-space handling. To avoid this sort of issue, whenever we have a template that
                needs to output raw text and that also includes elements (such as the
                <code class="language-xml">&lt;xsl:apply-templates&gt;</code> element here), we
                always wrap the raw text in <code class="language-xml">&lt;xsl:text&gt;</code>.</p>
            <section class="note">
                <p>You don’t have to (= shouldn’t) use
                    <code class="language-xml">&lt;xsl:text></code> when the entire content you’re
                    outputting in an element is raw text. For example, when we create an
                    <code class="language-xml">&lt;h1&gt;</code> on line 13, we just type the text
                    directly. It’s only when an element will contain <em>raw text together with
                        elements</em> that we have to wrap the raw text in
                    <code class="language-xml">&lt;xsl:text&gt;</code> tags.</p>
            </section>
            <p>When we apply templates to the first <code class="language-xml">&lt;line&gt;</code>
                in the process of creating the table of contents entries (line 34), we do so in a
                special <q>toc</q> mode. We don’t have a template that matches
                <code class="language-xml">&lt;line></code> elements in <q>toc</q> mode (our only
                template that matches <code class="language-xml">&lt;line></code> elements is in no
                mode), so the built-in template does the processing and just outputs the text of the
                line. This matters because had we instead applied templates to the first line for
                the table of contents in no mode, the template that matches lines in no mode (lines
                50–55) would have inserted an unwanted <code class="language-xml">&lt;br/></code>
                (see below). We don’t have to write a template to process lines in <q>toc</q> mode
                because the built-in does what we want, but we have to specify <q>toc</q> mode to
                ensure that the built-in, and not the template on lines 50–55, will process lines in
                table of contents.</p>
            <p>The second time we apply templates to
                <code class="language-xml">&lt;sonnet&gt;</code> elements occurs after our list
                (line 21), and this time we want to output the full text of each sonnet.</p>
            <section class="note">
                <p>Whether you apply templates to the
                    <code class="language-xml">&lt;sonnet&gt;</code> elements specifically (as we
                    did for the table of contents in line 17) or let the built-in behavior take you
                    there (as we do for the full text output in line 21) is up to you, and the
                    results are mostly the same. We selected the sonnets specifically for modal
                    processing of the table of contents because it was convenient to specify the
                    mode as we did that. We let the built-in behavior handle it for rendering the
                    full sonnets because we didn’t need to specify a mode. That isn’t a rule, but we
                    find it more legible than the alternatives.</p>
            </section>
            <p>The <code class="language-xml">&lt;xsl:apply-templates&gt;</code> instruction that is
                intended to lead to the output of the full text of each sonnet (line 21) has no
                <code class="language-xquery">@mode</code> attribute, which means that <em>it will
                    be seen only by templates that do not specify a mode</em>. The values for
                <code class="language-xquery">@mode</code> on
                <code class="language-xml">&lt;xsl:apply-templates&gt;</code> and
                <code class="language-xml">&lt;xsl:template&gt;</code> must be identical for a
                template to be triggered, and an
                <code class="language-xml">&lt;xsl:apply-templates&gt;</code> that doesn’t have a
                <code class="language-xquery">@mode</code> value specified will cause the nodes it
                selects to be processed only by template rules that also don’t specify a
                <code class="language-xquery">@mode</code> (or, of course, if there is no applicable
                template at all, by the built-in default). In this case we define a template without
                a <code class="language-xquery">@mode</code> value that matches
                <code class="language-xml">&lt;sonnet&gt;</code> elements (line 40–49), so this is
                what gets triggered here. According to this template rule, each sonnet produces a
                header (<code class="language-xml">&lt;h2&gt;</code>) that contains its number,
                followed by a paragraph that will contain the text of the sonnet. If we don’t do
                anything else, the built-in rules will kick in and cause the entire text of the
                sonnet in question, all fourteen lines, to be output in one continuous paragraph. To
                get each line to be rendered separately, we need to create a template rule (also
                with no <code class="language-xquery">@mode</code> value!) that will process the
                individual lines correctly.</p>
            <p>This modeless template that matches <code class="language-xml">&lt;line&gt;</code>
                elements (lines 50–55) first applies templates to the children of each
                <code class="language-xml">&lt;line&gt;</code> element, and since the only child of
                each <code class="language-xml">&lt;line&gt;</code> element is a single text node,
                the built-in default causes the text to be output as is. After each line though, we
                want an HTML line break (<code class="language-xml">&lt;br/&gt;</code>) element, so
                that the lines won’t all run together—except after the last, since there’s nothing
                to break there.</p>
            <p>We use the conditional <code class="language-xml">&lt;xsl:if&gt;</code> element
                (lines 52–54) to treat the last line of each sonnet (which shouldn’t be followed by
                a <code class="language-xml">&lt;br/&gt;</code>) differently from the others. Code
                inside an <code class="language-xml">&lt;xsl:if&gt;</code> element is executed only
                if the expression specified by the <code class="language-xquery">@test</code> can be
                evaluated as True. The test that we’ve written,
                <code class="language-xquery">following-sibling::line</code>, tests whether the line
                we’re processing at the moment has any
                <code class="language-xml">&lt;line&gt;</code> elements after it on the
                <code class="language-xquery">following-sibling::</code> axis. If it does, it isn’t
                the last line of the sonnet, so we output the
                <code class="language-xml">&lt;br/&gt;</code>. If it doesn’t, we don’t want the
                <code class="language-xml">&lt;br/&gt;</code>, and we don’t get it because the test
                fails. The purpose of this test is to generate line breaks between the lines in our
                HTML output, without creating an extra line break following the last line of a
                sonnet. The HTML <code class="language-xml">&lt;p&gt;</code> element containing
                these lines is <em>block</em> styled, meaning the browser already renders it as
                separate from other elements by displaying a line break at the end. We would be
                adding a semantically unnecessary line break if we generated a
                <code class="language-xml">&lt;br/&gt;</code> at the end of each paragraph, because
                it wouldn’t function to separate any lines.</p>
        </section>
        <section class="note">
            <p>You might think that you can identify the last line with a
                <code class="language-xquery">@test</code> value of
                <code class="language-xquery">position() ne last()</code>, which would output the
                <code class="language-xml">&lt;br&gt;</code> element whenever the position of the
                line being processed at the moment is not last. The problem with this is that if
                you’ve applied templates to all of the children of
                <code class="language-xml">&lt;sonnet&gt;</code> elements, as we do in line 46, you
                are applying templates not only to the lines, but also to the whitespace-only text
                nodes around them. As a result, the position of the first
                <code class="language-xml">&lt;line&gt;</code> element is
                <code class="language-xquery">2</code>, the next one is
                <code class="language-xquery">4</code>, and the last one is
                <code class="language-xquery">28</code>. The odd-numbered children are the
                whitespace-only text nodes before, between, and after the lines, including a
                whitespace-only text node at position <code class="language-xquery">29</code>, after
                the last <code class="language-xml">&lt;line&gt;</code> element. That means that the
                last line is not the last child of <code class="language-xml">&lt;sonnet&gt;</code>
                and the test for whether the position is equal to
                <code class="language-xquery">last()</code> will fail.</p>
            <p>You can fix this by changing line 46 from
                <code class="language-xml">&lt;xsl:apply-templates/&gt;</code> to
                <code class="language-xml">&lt;xsl:apply-templates select="line"/&gt;</code>. If you
                do that, you are applying templates only to the lines, so the last line is the last
                item in the sequence and the test for
                <code class="language-xquery">position() eq last()</code> will work.</p>
            <p>We prefer the test for following siblings over the test for last position because the
                test for following siblings is not affected by adjacent whitespace-only text nodes,
                which means that we are less likely to make a mistake in our coding. But as long as
                you are mindful of the whitespace-only text nodes, either method can be made to
                work.</p>
        </section>
    </body>
</html>
