<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
    <!--#set var="title" value="SVG assignment #3 answers" -->
    <!--#config timefmt="%Y-%m-%dT%X%z" -->
    <head>
        <title><!--#echo var="title" --></title>
        <link rel="stylesheet" type="text/css" href="http://www.obdurodon.org/css/style.css" />
        <!--#include virtual="inc/dh-header.html" -->
        <style type="text/css">
            body * {
              line-height: 1.5 !important;
            }
            .note {
              border: 1px gray solid;
              padding: 0 1em;
            }</style>
    </head>
    <body class="line-numbers">
        <!--#include virtual="inc/dh-boilerplate.html" -->
        <section>
            <h3>Overview</h3>
            <p>For this <a href="svg-assignment-03.xhtml">assignment</a>, we asked you to create a
                bubble chart for <a href="elections_1900_data.xml">US presidential elections from
                    1900 to 1912</a>, representing:</p>
            <ol>
                <li>Election year along the X axis</li>
                <li>Electoral votes along the Y axis</li>
                <li>Popular vote percentage by circle area</li>
                <li>Candidate’s party by circle color</li>
            </ol>
        </section>
        <section>
            <h3>Sample solution</h3>
            <pre class="language-xml"><code><![CDATA[<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:math="http://www.w3.org/2005/xpath-functions/math" exclude-result-prefixes="#all"
    xmlns="http://www.w3.org/2000/svg" version="3.0">
    <xsl:output method="xml" indent="yes"/>
    <!-- ================================================================ -->
    <!-- Stylesheet variables                                             -->
    <!-- ================================================================ -->
    <xsl:variable name="max_height" as="xs:double" select="500"/>
    <xsl:variable name="spacing" as="xs:double" select="100"/>
    <xsl:variable name="max_width" as="xs:double" select="($spacing) * count(//election)"/>
    <!-- ================================================================ -->
    <!-- Templates                                                        -->
    <!-- ================================================================ -->
    <xsl:template match="/">
        <svg height="{$max_height + 200}" width="{$max_width + 250}"
            viewBox="-50 -{$max_height + 100} {$max_width + 200} {$max_height + 200}">
            <!-- ==================================================== -->
            <!-- Create axis labels                                   -->
            <!-- ==================================================== -->
            <text x="{$max_width div 2}" y="-{$max_height + 50}" text-anchor="middle"
                font-size="18">Candidates’ electoral and popular votes</text>
            <text x="{$max_width div 2}" y="70" text-anchor="middle" font-size="16">Election
                Year</text>
            <text y="-{$max_height div 2}" x="-70" text-anchor="middle" font-size="16"
                writing-mode="tb">Electoral college votes</text>
            <!-- ==================================================== -->
            <!-- Create legend                                        -->
            <!-- ==================================================== -->
            <text x="{$max_width + 100}" y="-{$max_height * (2 div 3)}" font-size="12"
                dominant-baseline="middle">Republican</text>
            <circle cx="{$max_width + 80}" cy="-{$max_height * (2 div 3)}" r="10" fill="red"
                fill-opacity=".25"/>
            <text x="{$max_width + 100}" y="-{$max_height div 2}" font-size="12"
                dominant-baseline="middle">Democrat</text>
            <circle cx="{$max_width + 80}" cy="-{$max_height div 2}" r="10" fill="blue"
                fill-opacity=".25"/>
            <text x="{$max_width + 100}" y="-{$max_height div 3}" font-size="12"
                dominant-baseline="middle">Third party</text>
            <circle cx="{$max_width + 80}" cy="-{$max_height div 3}" r="10" fill="green"
                fill-opacity=".25"/>
            <circle cx="{$max_width + 100}" cy="-{$max_height div 6}"
                r="{100 * math:sqrt(.5 div math:pi())}" fill="white" stroke="black"/>
            <text y="-{($max_height div 6) + 6}" font-size="12" text-anchor="middle"
                dominant-baseline="middle">
                <tspan x="{$max_width + 100}">50% of </tspan>
                <tspan x="{$max_width + 100}" dy="12">popular vote</tspan>
            </text>
            <!-- ==================================================== -->
            <!-- Create per-election bubbles and vertical ruling      -->
            <!-- ==================================================== -->
            <xsl:apply-templates select="//election"/>
            <!-- ==================================================== -->
            <!-- Create horizontal ruling with labels                 -->
            <!-- ==================================================== -->
            <xsl:for-each select="0 to 5">
                <xsl:variable name="ruling_height" as="xs:double" select=". div 5 * $max_height"/>
                <line x1="0" x2="{$max_width}" y1="-{$ruling_height}" y2="-{$ruling_height}"
                    stroke="black" stroke-width="1"/>
                <text x="-20" y="-{$ruling_height}" text-anchor="end" dominant-baseline="middle"
                    font-size="12">
                    <xsl:value-of select="$ruling_height"/>
                </text>
            </xsl:for-each>
        </svg>
    </xsl:template>
    <xsl:template match="election">
        <!-- ============================================================ -->
        <!-- Template variables                                           -->
        <!-- ============================================================ -->
        <xsl:variable name="xpos" as="xs:double"
            select="((position() - 1) * $spacing) + ($spacing div 2)"/>
        <!-- ============================================================ -->
        <!-- Create bubbles                                               -->
        <!-- ============================================================ -->
        <xsl:apply-templates>
            <xsl:with-param name="xpos" as="xs:double" select="$xpos"/>
        </xsl:apply-templates>
        <!-- ============================================================ -->
        <!-- Create vertical ruling line and label                        -->
        <!-- ============================================================ -->
        <line y1="15" y2="-{$max_height}" x1="{$xpos}" x2="{$xpos}" stroke="black" stroke-width="1"/>
        <text y="40" x="{$xpos}" text-anchor="middle" font-size="12">
            <xsl:value-of select="@year"/>
        </text>
    </xsl:template>
    <xsl:template match="candidate">
        <!-- ============================================================ -->
        <!-- Process individual candidates                                -->
        <!-- ============================================================ -->
        <xsl:param name="xpos" as="xs:double" required="yes"/>
        <xsl:variable name="ypos" as="xs:double" select="@electoral_votes"/>
        <xsl:variable name="radius" as="xs:double"
            select="10 * math:sqrt(@popular_percentage div math:pi())"/>
        <!-- ============================================================ -->
        <!-- Color bubble according to candidate party                    -->
        <!-- Print percentage if greater than 20%                         -->
        <!-- ============================================================ -->
        <xsl:variable name="bubble_color" as="xs:string" select="
                if (@party = 'Republican') then
                    'red'
                else
                    if (@party = 'Democrat') then
                        'blue'
                    else
                        'green'"/>
        <circle cx="{$xpos}" cy="-{$ypos}" r="{$radius}" fill="{$bubble_color}" fill-opacity=".25"/>
        <xsl:if test="number(@popular_percentage) gt 20">
            <text x="{$xpos + 10}" y="-{$ypos + $radius}" fill="black" font-size="smaller"
                dominant-baseline="middle">
                <xsl:value-of select="@popular_percentage"/>
            </text>
        </xsl:if>
        <!-- ============================================================ -->
        <!-- Center circle last                                           -->
        <!-- ============================================================ -->
        <circle cx="{$xpos}" cy="-{$ypos}" r="2" fill="black"/>
    </xsl:template>
</xsl:stylesheet>
]]></code></pre>
        </section>
        <section>
            <h3>Discussion</h3>
            <section>
                <h4>Comments and variable names</h4>
                <p>The way you style your comments is up to you, but every XSLT stylesheet should
                    include comments that help you find your way quickly to the part of the code
                    that you need to work on at the moment. This is sometimes called
                        <dfn>signposting</dfn>.</p>
                <p>You may have read Other People’s Code that uses variable names like
                    <code class="language-xquery">$a</code>,
                    <code class="language-xquery">$b</code>, or
                    <code class="language-xquery">$c</code>. This type of meaningless variable
                    naming is Bad Practice; what you should do instead is use variable names that
                    are self-documenting. Not only do self-documenting variable names make your code
                    easier to understand in general, but they relieve you of having to write as many
                    comments. For example, if you call the position along the X axis something like
                    <code class="language-xquery">$xpos</code>, you won’t have to write a comment to
                    explain what it represents.</p>
            </section>
            <section>
                <h4>Stylesheet (global) variables</h4>
                <p>We begin by declaring a few stylesheet variables, that is, variables that can be
                    used anywhere in the transformation. We’ve let XPath compute the maximum width
                    according to the number of elections (line 11), which means that the value will
                    adjust itself if we use a smaller or larger data set. We hard-coded the values
                    for the other stylesheet variables (lines 9–10), although in Real Life we might
                    compute them according to what the data tells us, as we do for the maximum
                    width. For example, the <code class="language-xquery">$max_height</code>
                    variable (line 9), which represents the maximal value that will need to be
                    represented on the Y axis, depends on the maximal electoral votes received by
                    any candidate in our data. Instead of hard-coding a value of
                    <code class="language-xquery">500</code>, we could have used
                    <code class="language-xquery">max(//@electoral_votes)</code> to let XPath tell
                    us that the maximum number of electoral votes earned by any candidate in these
                    particular elections is 435.</p>
                <section class="note">
                    <p>If we want the Y position of the top ruling line to be the smallest multiple
                        of 100 that is above the largest attained number of electoral votes (in this
                        case, the top ruling line is at 500 because the maximum attained number of
                        votes is 435), we could use:</p>
                    <pre class="language-xquery"><code>(max(//@electoral_votes) div 100) => ceiling() * 100</code></pre>
                    <p>The XPath <code class="language-xquery">ceiling()</code> function rounds a
                        numerical value up to the closest integer. This means that we can start by
                        finding the largest electoral vote value
                        (<code class="language-xquery">435</code>), divide by 100
                        (<code class="language-xquery">4.35</code>), round up
                        (<code class="language-xquery">5</code>), and then multiply by 100
                        (<code class="language-xquery">500</code>).</p>
                </section>
            </section>
            <section>
                <h4>Templates</h4>
                <p>Our stylesheet has three templates, one that matches the document node and
                    creates the basic SVG output (including horizontal ruling lines, axis labels,
                    and legend; lines 15–66), one that processes each election (including vertical
                    ruling lines and year labels; lines 67–86), and one that processes each
                    candidate (bubble, bubble label, black center dot; lines 87–118). Where
                    possible, we prefer to let the data tell us how to position the different
                    components of the chart, so that, for example, we used the maximum width (a
                    stylesheet variable computed from the number of elections) to determine the X
                    position of the legend. Whether to hard-code a numerical value or compute it on
                    the basis of the data is up to you, but in general it’s better to compute, since
                    with a hard-coded value you won’t remember what it means or why you chose the
                    value you did if you need to change it to accommodate new data later.
                    (Hard-coded values that are not self-documenting are called <dfn>magic
                        numbers</dfn>, and are generally considered poor practice.)</p>
                <p>Template variables (that is, variables created inside a template) are computed
                    afresh each time the template is called. In our solution, the value of
                    <code class="language-xquery">position()</code> inside the template that matches
                    <code class="language-xml">&lt;election&gt;</code> elements (lines 72–73)
                    returns the ordinal position of the election in the sequence of elections that
                    we are processing; for example, the value of the
                    <code class="language-xquery">position()</code> function when we process the
                    first election is <code class="language-xquery">1</code>, the value when we
                    process the second election is <code class="language-xquery">2</code>, etc. We
                    use these different <code class="language-xquery">position()</code> values to
                    compute where on the X axis to locate the information for each election. We bind
                    that computed value to a variable called
                    <code class="language-xquery">$xpos</code> within the template that processes
                    elections and use it there to position the vertical ruling line (line 82) and
                    its label (lines 83–85).</p>
                <p>We compute <code class="language-xquery">$xpos</code> in the template that
                    matches <code class="language">&lt;election&gt;</code> elements because the
                    vertical ruling line and the X-axis label are properties of the election. But
                    that same horizontal position would be useful for plotting the circles for each
                    candidate in the election, and those get drawn in a different template, the one
                    that matches <code class="language-xml">&lt;candidate&gt;</code> elements. This
                    poses a challenge because <dfn>template variables</dfn> (that is, variables
                    computed inside a template, like the <code class="language-xquery">$xpos</code>
                    variable computed inside the template that matches
                    <code class="language-xquery">&lt;election&gt;</code> elements) are available
                    only inside the template where they are created, and this means that
                    <code class="language-xquery">$xpos</code> is not automatically available inside
                    the template that matches <code class="language-xml">&lt;candidate&gt;</code>
                    elements. We could just recompute it inside that template, but a better
                    alternative is to pass it from the template that matches
                    <code class="language-xml">&lt;election&gt;</code> elements into the one that
                    matches <code class="language-xml">&lt;candidate&gt;</code> elements elements by
                    using <code class="language-xml">&lt;xsl:with-param&gt;</code> and
                    <code class="language-xml">&lt;xsl:param&gt;</code>.</p>
            </section>
            <section>
                <h4>Using <code class="language-xml">&lt;xsl:with-param&gt;</code> and
                    <code class="language-xml">&lt;xsl:param&gt;</code></h4>
                <p>You don't have to use <code class="language-xml">&lt;xsl:with-param&gt;</code>
                    and <code class="language-xml">&lt;xsl:param&gt;</code> to complete this task
                    because you can instead compute the horizontal position of the circles inside
                    the template that matches <code class="language-xml">&lt;candidate&gt;</code>
                    elements by using
                    <code class="language-xquery">count(preceding::election) + 1</code> or something
                    similar. That strategy works because candidates in the first election have no
                    preceding elections (your parent does not precede you; it contains you),
                    candidates in the second election have one preceding election, etc. If, though,
                    we instead use <code class="language-xml">&lt;xsl:with-param&gt;</code> and
                    <code class="language-xml">&lt;xsl:param&gt;</code> we can avoid having to
                    compute the same election-specific values more than once.</p>
                <p>We process the candidates for each election in a template that matches
                    <code class="language-xml">&lt;candidate&gt;</code> elements (lines 87–119), and
                    since all candidates have the same horizontal position as the vertical ruling
                    line for the election, for which we’ve already computed
                    <code class="language-xquery">$xpos</code>, instead of recomputing it we can
                    pass it from the template that matches
                    <code class="language-xml">&lt;election&gt;</code> elements into the template
                    that matches <code class="language-xml">&lt;candidate&gt;</code> elements. This
                    strategy lets us compute the horizontal position just once and then use it for
                    all of the items that depend on it for their position, both those that are
                    election-specific and those that are candidate-specific. When we pass a variable
                    with <code class="language-xml">&lt;xsl:with-param&gt;</code> inside
                    <code class="language-xml">&lt;xsl:apply-templates&gt;</code> (lines 76–78), the
                    called template has to retrieve that value with
                    <code class="language-xml">&lt;xsl:param&gt;</code> (line 91). The
                    <code class="language-xml">&lt;xsl:with-param&gt;</code> (in the caller) and
                    <code class="language-xml">&lt;xsl:param&gt;</code> elements (in the called
                    template) thus work together to make variables declared inside one template
                    accessible inside another.</p>
            </section>
            <section>
                <h4>Rendering order and Z axis</h4>
                <p>You may not have encountered the term <dfn>Z axis</dfn> before, but just as the X
                    and Y axes describe a location in two-dimensional space, the Z axis adds a third
                    dimension, and represents which items are <em>on top of</em> others—not in the
                    sense of vertically above, but in the sense of covering them up the way a
                    tablecloth is <em>on top of</em> a table and masks the surface. SVG lets you
                    specify the X and Y position directly for most objects, so, for example, an
                    object with a larger X axis value is to the right of an object with a smaller
                    value. SVG does not specify Z axis in the same way, though. What SVG does
                    instead is render objects in the order in which they are created from top to
                    bottom in the angle-bracketed SVG source. This means that if you draw two
                    overlapping fully opaque circles, the one you draw second will mask out the one
                    you draw first in the area where they overlap. For example, the code:</p>
                <pre class="language-xml"><code><![CDATA[<svg xmlns="http://www.w3.org/2000/svg" height="200" width="250">
    <circle cx="100" cy="100" r="100" fill="red"/>
    <circle cx="150" cy="100" r="100" fill="blue"/>
</svg>]]></code></pre>
                <p>draws the blue circle after it draws the red one, so the blue masks the red where
                    they overlap. If you change the order of the two
                    <code class="language-xml">&lt;circle&gt;</code> elements in the raw SVG, the
                    red will instead mask the blue.</p>
                <div>
                    <svg xmlns="http://www.w3.org/2000/svg" height="100" width="200">
                        <circle cx="50" cy="50" r="50" fill="red"/>
                        <circle cx="100" cy="50" r="50" fill="blue"/>
                    </svg>
                </div>
                <p>The order of the code that creates the SVG objects matters because you have to
                    decide which should be on top. In our experience Z order is especially important
                    with ruling lines, which are common on graphs; sometimes we want the data
                    objects (rectangles, circles, etc.) to mask the ruling lines, and at other times
                    we want the ruling lines to cross or run through the shapes.</p>
            </section>
            <section>
                <h4>Coloring bubbles using a variable and conditional expressions</h4>
                <p>You may have approached the question of bubble color in various ways, such as
                    through using multiple templates or
                    <code class="language-xml">&lt;xsl:choose></code>. In order to draw circles of
                    different colors within the same template we created a variable named
                    <code class="language-xquery">$bubble_color</code>, which we used as the value
                    of the <code class="language-xquery">@fill</code> attribute for our circle. The
                    <code class="language-xquery">@select</code> value of
                    <code class="language-xquery">$bubble_color</code> uses a conditional XPath
                    expression, which you can read about on page 551 of Michael Kay. The syntax is
                    generally self-explanatory: <code class="language-xquery">if</code> establishes
                    a condition that must be true for the subsequent
                    <code class="language-xquery">then</code> value to be used.
                    <code class="language-xquery">else</code> states what happens in all other
                    cases, which can be either a specific value (e.g., if
                    <code class="language-xquery">@party</code> is neither
                    <code class="language-xquery">&apos;Republican&apos;</code> or
                    <code class="language-xquery">&apos;Democrat&apos;</code>, then the value of
                    <code class="language-xquery">@$bubble_color</code> will be
                    <code class="language-xquery">&apos;green&apos;</code>) or another test (if the
                    value of <code class="language-xquery">@party</code> isn’t
                    <code class="language-xquery">'Republican'</code>, we test whether it’s
                    <code class="language-xquery">'Democrat'</code>). Note that in XPath, unlike in
                    some other programming languages, the condition (after the
                    <code class="language-xquery">if</code> keyword) must be enclosed in parentheses
                    and the <code class="language-xquery">else</code> clause must be present, even
                    if you want to do nothing if the condition is not true. The way to say that the
                    <code class="language-xquery">else</code> option is to do nothing is to specify
                    the value as <code class="language-xquery">()</code>, that is, as an empty
                    sequence.</p>
                <p>Our conditional expression means that
                    <code class="language-xquery">$bubble_color</code> will take different values
                    under different conditions. When we call
                    <code class="language-xquery">$bubble_color</code> in the
                    <code class="language-xquery">@fill</code> value, then, the value used will have
                    been set in a way that reflects the party of the candidate the XSLT is currently
                    processing.</p>
                <section class="note">
                    <p><code class="language-xquery">if</code>/<code class="language-xquery">then</code>/<code class="language-xquery">else</code>
                        statements can become difficult to read beyond a couple of levels of
                        nesting, and you can use an XPath <code class="language-xquery">map</code>
                        structure as an alternative way of looking up a color according to the
                        candidate’s party. Maps are not included in Michael Kay’s book because they
                        were introduced with XPath 3.0, and his book covers XPath only through
                        version 2.0, but they are addressed in the <a
                            href="https://www.saxonica.com/documentation10/index.html#!expressions/xpath30maps"
                            >documentation for Saxon</a> (the XPath engine build into
                        &lt;oXygen/&gt;).</p>
                </section>
            </section>
        </section>
    </body>
</html>
