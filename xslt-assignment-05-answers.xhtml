<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
  <!--#set var="title" value="XSLT assignment #5: answers" -->
  <!--#config timefmt="%Y-%m-%dT%X%z" -->
  <head>
    <title><!--#echo var="title" --></title>
    <link rel="stylesheet" type="text/css" href="http://www.obdurodon.org/css/style.css" />
    <!--#include virtual="inc/dh-header.html" -->
    <style type="text/css">
      body * {
        line-height: 1.5 !important;
      }</style>
  </head>
  <body class="line-numbers">
    <!--#include virtual="inc/dh-boilerplate.html" -->
    <section>
      <h3>The assignment</h3>
      <p>Enhance your output from the last assignment in the following ways:</p>
      <ul>
        <li>Create links between the items in the table of contents and the sonnets, so that you can
          click on a line and be taken immediately to the corresponding sonnet.</li>
        <li>Alphabetize the list of first lines, so that the table of contents will be sorted
          alphabetically, instead of in numerical order.</li>
        <li>Move the roman numeral numbers to the end of the lines in the table of contents and
          enclose them in parantheses.</li>
      </ul>
    </section>
    <section>
      <h3>Our solution</h3>
      <pre class="language-xml"><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/1999/xhtml"
  xmlns:math="http://www.w3.org/2005/xpath-functions/math" exclude-result-prefixes="#all"
  version="3.0">
  &lt;xsl:output method="xhtml" html-version="5" omit-xml-declaration="no" include-content-type="no"
    indent="yes"/>
  &lt;xsl:template match="/"&gt;
    &lt;html&gt;
      &lt;head&gt;
        &lt;title&gt;Shakespearean sonnets&lt;/title&gt;
      &lt;/head&gt;
      &lt;body&gt;
        &lt;h1&gt;Shakespearean sonnets&lt;/h1&gt;
        &lt;h2&gt;Contents&lt;/h2&gt;
        &lt;ul&gt;
          &lt;xsl:apply-templates select="//sonnet" mode="toc"&gt;
            &lt;xsl:sort select='translate(., "&amp;apos;", "")'/&gt;
          &lt;/xsl:apply-templates&gt;
        &lt;/ul&gt;
        &lt;hr/&gt;
        &lt;xsl:apply-templates/&gt;
      &lt;/body&gt;
    &lt;/html&gt;
  &lt;/xsl:template&gt;
  &lt;!-- ============================================== -->
  &lt;!-- Table of contents mode                         -->
  &lt;!-- ============================================== -->
  &lt;xsl:template match="sonnet" mode="toc"&gt;
    &lt;li&gt;
      &lt;a href="#sonnet{@number}"&gt;
        &lt;xsl:apply-templates select="line[1]" mode="toc"/&gt;
        &lt;xsl:text&gt; (&lt;/xsl:text&gt;
        &lt;xsl:apply-templates select="@number"/&gt;
        &lt;xsl:text&gt;)&lt;/xsl:text&gt;
      &lt;/a&gt;
    &lt;/li&gt;
  &lt;/xsl:template&gt;
  &lt;xsl:template match="line" mode="toc"&gt;
    &lt;xsl:apply-templates/&gt;
  &lt;/xsl:template&gt;
  &lt;!-- ============================================== -->
  &lt;!-- Reading view                                   -->
  &lt;!-- ============================================== -->
  &lt;xsl:template match="sonnet"&gt;
    &lt;section id="sonnet{@number}">
      &lt;h2&gt;
        &lt;xsl:apply-templates select="@number"/&gt;
      &lt;/h2&gt;
      &lt;p&gt;
        &lt;xsl:apply-templates select="line"/&gt;
      &lt;/p&gt;
    &lt;/section>
  &lt;/xsl:template&gt;
  &lt;xsl:template match="line"&gt;
    &lt;xsl:apply-templates/&gt;
    &lt;xsl:if test="following-sibling::line"&gt;
      &lt;br/&gt;
      &lt;xsl:text&gt;&amp;#x0A;&lt;/xsl:text&gt;
    &lt;/xsl:if&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</code></pre>
      <p>The description of our solution to this assignment assumes that you have read our previous
          <a href="xslt-assignment-04-answers.xhtml">answer sheet for XSLT assignment #4</a>,
        because this assignment builds largely upon the work done in that one. If you haven’t
        studied that solution, you can do so at <a
          href="http://dh.obdurodon.org/xslt-assignment-04-answers.xhtml"
          >http://dh.obdurodon.org/xslt-assignment-04-answers.xhtml</a>.</p>
      <p>To observe the effects of the changes we’ve made to our stylesheet from the last
        assignment, we’re going to make comparisons to that solution. For the moment, we will ignore
        the changes in the template that matches the document node
        (<code class="language-xquery">/</code>). The changes there affect the sorting of our table
        of contents. Instead, take a look at the template that matches
        <code class="language-xml">&lt;sonnet&gt;</code> where
        <code class="language-xquery">@mode = "toc"</code>. We’ve done two things there.</p>
      <h3>Creating clickable links</h3>
      <p>Within our list of first lines we need to wrap the <em>content</em> of each of our
        <code class="language-xml">&lt;li&gt;</code> elements in an
        <code class="language-xml">&lt;a&gt;</code> tag with an
        <code class="language-xquery">@href</code> attribute, which is how HTML defines a clickable
        link. We need a consistent strategy to create <code class="language-xquery">@href</code>
        values for the links, so that every link will point unambiguously to the text of exactly one
        sonnet. In order for the links to work properly (that is, to have somewhere to land), each
        of them has to match perfectly the <code class="language-xquery">@id</code> value of exactly
        one element in the document, which we will be generating later. We chose to make all of our
        <code class="language-xquery">@href</code> attributes have the form of the string
          <q>sonnet</q> followed by that sonnet’s specific roman numeral, so that the first sonnet’s
        link, for example, would look like
        <code class="language-xml">&lt;a href="#sonnetI"&gt;</code> and the second sonnet’s link
        look like <code class="language-xml">&lt;a href="#sonnetII&gt;</code>, etc. Remember (from
        the description of the original assignment) that all
        <code class="language-xml">&lt;a&gt;</code> elements linking to somewhere else on the same
        page must begin their <code class="language-xquery">@href</code> values with a hashmark
          (<q>#</q>), but that character should <em>not</em> be part of the corresponding
        <code class="language-xquery">@id</code> value of the target of the link. For example, a
        clickable link that points to Sonnet #2 will have a start tag that reads
        <code class="language-xml">&lt;a href="#sonnetII"&gt;</code> (with a hash mark
        [<code class="language-xquery">#</code>]), and the
        <code class="language-xml">&lt;section&gt;</code> element wrapping that sonnet will have a
        start tag that reads <code class="language-xml">&lt;section id="sonnetII"&gt;</code>
        (without a hash mark).</p>
      <p>To generate a different value of <code class="language-xquery">@href</code> for every
        sonnet’s link (and, later, for the <code class="language-xquery">@id</code> to which the
        <code class="language-xquery">@href</code> points) we need to use XPath. We describe how to
        do this in our page about <a href="avt.xhtml">Attribute value templates (AVT)</a>. For
        reasons explained at that page, to delimit our XPath expression within the otherwise literal
        attribute value we need to encase it in curly braces
        (<code class="language-xquery">{}</code>). We can retrieve the unique roman numeral for the
        sonnet we are processing at the moment by looking for it in the
        <code class="language-xquery">@number</code> attribute of that
        <code class="language-xml">&lt;sonnet&gt;</code>. We concatenate the raw string
          <q>sonnet</q> with the retrieved value of the <code class="language-xquery">@number</code>
        attribute as follows (see our <a href="avt.xhtml">documentation on AVTs</a> for an
        explanation of the role of the curly braces):</p>
      <pre class="language-xml"><code>&lt;a href="#sonnet{@number}"&gt;
    …
&lt;/a&gt;</code></pre>
      <p>We also need to sort the first lines. Unless we specify otherwise, XSLT will process the
        sonnets in document order, which is numerical order because they happen to be arranged that
        way in the input XML document. In addition to sorting the first lines, we also want to
        render the textual content of the line <em>before</em> the sonnet number (roman numeral). If
        we don’t do that, although our lines will be alphabetical order, users won’t be able to see
        that easily because each line will begin with a roman numeral that isn’t part of that sort
        order. What we really want is for users to glance down the left margin of the list of first
        lines and find the ones they want easily. To make the alphabetic order easier to see, we
        move the <code class="language-xml">&lt;xsl:apply-templates&gt;</code> selecting our first
        line to the beginning of the ouput, and move the roman numeral to the end, wrapped in
        parentheses. As always, instead of outputting raw text when we’re creating mixed content, we
        wrap all raw text in <code class="language-xml">&lt;xsl:text&gt;</code> elements, which
        helps prevent quirky white-space handling.</p>
      <p>The next change we have to make in order to get our table of contents to link to our
        sonnets is to create <code class="language-xquery">@id</code> attributes for the targets of
        our links, so that when the user clicks on a link, there will be somewhere to scroll to.
        Remember that the <code class="language-xquery">@href</code> values that we‘ve created for
        our clickable links <em>must</em> start with hashmarks
        (<code class="language-xquery">#</code>), but the values of the identifiers
        (<code class="language-xquery">@id</code> attributes) they point to <em>must not</em> start
        with hashmarks (<code class="language-xquery">#</code>). We chose to put the identifiers on
        the <code class="language-xml">&lt;section></code> elements that we generate; this way, when
        users click on a link to a sonnet.</p>
      <section class="note">
        <p>We chose to create our <code class="language-xquery">@id</code> values, and the links
          that point to them, in a deliberate way that ensured that they would be legible to humans,
          since that makes it easier for us to recognize mistakes during development. Constructing
          our own values becomes more challenging and less appealing as our need for links (in other
          projects) becomes more intricate, and XPath provides, as an alternative to building your
          own unique identifier, the <code class="language-xquery">generate-id()</code> function,
          which can be used to construct links automatically. You can read about how to use
          <code class="language-xquery">generate-id()</code> in Michael Kay, but here is a
          summary:</p>
        <ul>
          <li><p><code class="language-xquery">generate-id()</code> is guaranteed to create the same
              value for the same node in the input tree each time it is evaluated during an XSLT
              transformation. This means that if you apply it to sonnets in two different templates
              (as we do for this exercise), it will create the same value, and that means that you
              can use the value to construct a link. But:</p><ul>
              <li><p>You still have to prepend the hash mark to the clickable link yourself, but not
                  to the target <code class="language-xquery">@id</code>.</p></li>
              <li><p>To get the same value you need to evaluate exactly the same node from the input
                  tree. For example, you’ll get a different value for a sonnet than you will for its
                  first line.</p></li>
              <li><p>The value created for a particular node in the input XML is guaranteed to be
                  unique and repeatable only within a transformation, which means that if you run
                  the transformation twice you could get different values. This isn’t an issue as
                  long as the links are internal, but it limits the possibility of using this method
                  to create links from one file to a specific location in a different file.</p></li>
            </ul></li>
          <li><p>The advantages are that you don’t have to construct a complex value manually and
              the values are guaranteed to be unique (which is a requirement for
              <code class="language-xquery">@id</code> attributes in HTML) and repeatable (which is
              needed to ensure that your clickable links and targets will agree).</p></li>
          <li><p>The disadvantage is that the value is not human-readable, which can make this
              approach more difficult to debug than working with values like <q>sonnetI</q>,
                <q>sonnetII</q>, etc.</p></li>
        </ul>
      </section>
    </section>
    <section>
      <h3>Alphabetizing the first lines</h3>
      <p>Finally, we need to sort the table of contents in alphabetical order of their first lines.
        We can do that by putting <code class="language-xml">&lt;xsl:sort&gt;</code> between the
        start and end tags of <code class="language-xml">&lt;xsl:apply-templates&gt;</code>, but if
        that’s all we do, one sonnet will be out of place. The exception is that Sonnet CXXI begins
        with <q>‘Tis</q>, and the apostrophe at the beginning of that line will cause that line to
        be sorted alphabetically before all other sonnets. This happens because if all we do is tell
        the system to sort, it uses all characters in the sonnet (starting with the first line) to
        sort, and it doesn’t know that the leading apostrophe should be ignored.</p>
      <p>We can fix this problem by using the XPath <code class="language-xquery">translate()</code>
        function inside the <code class="language-xquery">@select</code> attribute of
        <code class="language-xml">&lt;xsl:sort&gt;</code> to modify the sonnets before sorting
        them. Because we use <code class="language-xquery">translate()</code> only for sorting
        purposes, we aren’t changing what we write into the output, so although the apostrophe will
        be ignored during sorting, it will be rendered where it belongs, that is, where it occurred
        in the original input. We do that by putting the instruction to translate it into nothing
        (an empty string, using the <code class="language-xquery">translate()</code> function)
        inside the value of the <code class="language-xquery">@select</code> attribute of the
        <code class="language-xml">&lt;xsl:sort&gt;</code> element.</p>
      <p>The challenge we run into while trying to use this function involves nesting our quotation
        marks so that our XSLT document remains well-formed. We have only two sets of quotation
        marks available in XPath: single and double. If we need both, we can nest them, but here we
        need three: the value of the <code class="language-xquery">@select</code> attribute must be
        inside quotation marks, the second and third arguments to
        <code class="language-xquery">translate()</code> are strings that must be inside quotation
        marks, and the character we want to translate away is also a quotation mark. Our solution
        here encloses the attribute value with single quotation marks, it encloses the arguments of
        <code class="language-xquery">translate()</code> in double quotation marks, and it uses the
        <code class="language-xquery">&amp;apos;</code> character entity to represent the apostrophe
        we want to remove from our text for sorting. There are other methods of accomplishing this,
        as well (see below).</p>
      <p>So how does <code class="language-xquery">&amp;apos;</code> work? We’ve been using three
        built-in XML character entities so far: <code class="language-xquery">&amp;amp;</code>
        (ampersand, or <q>&amp;</q>), <code class="language-xquery">&amp;lt;</code> (less than, or
          <q>&lt;</q>), and <code class="language-xquery">&amp;gt;</code> (greater than, or
          <q>&gt;</q>). XML builds in two more character entities:
        <code class="language-xquery">&amp;apos;</code> for the straight apostrophe (<q>'</q>)) and
        <code class="language-xquery">&amp;quot;</code> for the straight double quotation mark
          (<q>"</q>). Here we exploit the fact that when our XSLT stylesheet is checked for
        well-formedness, the <code class="language-xquery">&amp;apos;</code> character entity has
        not yet been transformed into an apostrophe, so we don’t have an unmatched quotation mark.
        If you copy and paste our code, above, into &lt;oXygen/&gt; and try replacing the character
        entity with a raw single apostrophe character, the squiggly red line will appear to tell you
        that that’s forbidden. The character entity lets us get away with having one more level of
        quotation marks.</p>
    </section>
    <section>
      <h3>XPath magic</h3>
      <p>We can think of at least two alternative ways of protecting the straight apostrophe from
        raising an error. One is that we can declare a variable, the value of which is just the
        single apostophe, and then refer to the variable inside the
        <code class="language-xquery">translate()</code> function, and we can use either:</p>
      <pre class="language-xml"><code>&lt;xsl:variable name="apostrophe" as="xs:string">'&lt;/xsl:variable></code></pre>
      <p>or</p>
      <pre class="language-xml"><code>&lt;xsl:variable name="apostrophe" as="xs:string" select="'"/></code></pre>
      <p>A variable value can be specified in two different ways in XSLT, either as the value of a
        <code class="language-xquery">@select</code> attribute on the
        <code class="language-xml">&lt;xsl:variable></code> element or as the content of that
        element, between the start and end tags. We can use either method here, and we can then
        refer to our variable inside the <code class="language-xquery">translate()</code>
        function:</p>
      <pre class="language-xml"><code>&lt;xsl:sort select="translate(., $apostrophe, '')"></code></pre>
      <p>Alternatively, we can <dfn>escape</dfn> the apostrophe (that is, tell it not to have its
        regular meaning of string-delimiter) inside quotation marks by doubling it:</p>
      <pre class="language-xml"><code>&lt;xsl:sort select="translate(.,'''','')"/&gt;</code></pre>
      <p>As Michael Kay puts it, <q>the delimiter of a string literal can be included in the string
          literal by doubling it</q>. (<a
          href="http://stackoverflow.com/questions/13482352/xquery-looking-for-text-with-single-quote"
          >http://stackoverflow.com/questions/13482352/xquery-looking-for-text-with-single-quote</a>)
        In other words, you can include an apostrophe inside apostrophes by doubling it, that is, by
        using a sequence of four apostrophes, rather than the three that correspond to what you
        mean.</p>
    </section>
    <hr />
    <section>
      <h3>Further enhancements</h3>
      <p>In Real Life we might want to take into account that Shakespearean sonnets normally have
        fourteen lines, structured (through the rhyme scheme) as three quatrains followed by a
        couplet. There are two exceptions: sonnet 99 contains fifteen lines (it begins with a
        quintain, rather than a quatrain) and sonnet 126 contains twelve lines that, furthermore,
        and structured, through the rhyme scheme, as six couplets. To deal with those exceptions we
        might make the following enhancements:</p>
      <ol>
        <li>In the reading view, group the lines according to the substructure instead of running
          them all together with no internal vertical spacing. For example, we might add vertical
          space after each quatrain. Because sonnets 99 and 126 are irregular, we have to handle
          those individually.</li>
        <li>Number the lines of the sonnets, but not all of the lines because that would look
          cluttered. We opted for numbering the first line of each of the subgroups above.</li>
        <li>Add an alert in both the index of first lines and the reading view about the two
          irregular sonnets.</li>
      </ol>
      <p>You can see our enhanced view at <a href="enhanced-sonnets.xhtml"
          >http://dh.obdurodon.org/enhanced-sonnets.xhtml</a>. If you view the source you’ll notice
        that the line numbers and the spacing between parts of the sonnet are not encoded explicitly
        in the HTML. In this way we reserve the HTML for representing the structure and we use CSS
        to control the appearance. You’ll notice also that we’ve used
        <code class="language-xquery">@class</code> attributes very sparsely as a way of maintaining
        the legibility of our HTML. The <code class="language-xquery">@id</code> attributes on the
        two main sections (index of first lines, reading view), combined with the CSS <a
          href="https://developer.mozilla.org/en-US/docs/Web/CSS/Descendant_combinator">descendant
          combinator</a> pattern, let us fine-tune our selectors without the clutter that pervasive
        <code class="language-xquery">@class</code> attributes would introduce.</p>
      <section class="note">
        <p>Placing classes (and especially classes with multiple values) on most of your elements is
          a rookie mistake that makes your HTML illegible, and therefore hard to debug and maintain,
          and you aren’t rookies anymore. Learn to use the CSS combinators to address locations in
          your HTML that don’t have their own <code class="language-xquery">@class</code> (or
          <code class="language-xquery">@id</code>) attributes. See the W3Schools <a
            href="https://www.w3schools.com/css/css_combinators.asp">CSS Combinators</a> or MDN <a
            href="https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Selectors/Combinators"
            >Combinators</a> pages for introductions with examples. You can also select elements in
          your CSS according to their attributes; see the MDN <a
            href="https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors">Attribute
            selectors</a> page for an introduction with examples.</p>
      </section>
      <p>The XSLT that produces our enhanced view is below, with embedded comments to explain what
        each part does. We use one feature that we haven’t introduced yet, a user-defined function,
        and you can peek ahead to learn about those at <a href="xslt-functions.xhtml"
          >http://dh.obdurodon.org/xslt-functions.xhtml</a>.</p>
      <p>In our earlier approaches we tagged sonnets in the output as paragraph and used line breaks
        to separate the lines. We now want to use CSS to number the lines, and that isn’t easy if
        the individual lines are not individual elements in the HTML. For that reason we change
        strategies: we now tag each sonnet section (e.g., quatrain, couplet) as an unordered list
        and each line as a list item in those lists.</p>
      <pre class="language-xml"><code><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:djb="http://www.obdurodon.org"
  xmlns:math="http://www.w3.org/2005/xpath-functions/math" xmlns="http://www.w3.org/1999/xhtml"
  exclude-result-prefixes="#all" version="3.0">
  <xsl:output method="xhtml" html-version="5" omit-xml-declaration="no" include-content-type="no"
    indent="yes"/>
  <!-- ================================================================== -->
  <!-- Stylesheet variables                                               -->
  <!-- $title is used in <title> and <h1>                                 -->
  <!-- ================================================================== -->
  <xsl:variable name="title" as="xs:string" select="'Shakespearean sonnets'"/>
  <!-- ================================================================== -->
  <!-- Local functions                                                    -->
  <!-- ================================================================== -->
  <xsl:function name="djb:use-curly-apostrophe" as="xs:string">
    <!-- Replace straight apostrophe with curly -->
    <xsl:param name="input" as="xs:string"/>
    <xsl:value-of select="translate($input, '''', '’')"/>
  </xsl:function>
  <!-- ================================================================== -->
  <!-- Main                                                               -->
  <!-- ================================================================== -->
  <xsl:template match="/">
    <html>
      <head>
        <title>
          <xsl:value-of select="$title"/>
        </title>
        <link rel="stylesheet" type="text/css" href="sonnets.css"/>
      </head>
      <body>
        <main>
          <h1>
            <xsl:value-of select="$title"/>
          </h1>
          <hr/>
          <section id="contents">
            <h2>Index of first lines</h2>
            <ul>
              <xsl:apply-templates select="//sonnet" mode="toc">
                <!-- Sort "'Tis" like "Tis" (ignore leading apostrophe) -->
                <xsl:sort select="line[1] ! translate(., '''', '')"/>
              </xsl:apply-templates>
            </ul>
          </section>
          <hr/>
          <section id="reading">
            <xsl:apply-templates select="//sonnet"/>
          </section>
        </main>
      </body>
    </html>
  </xsl:template>
  <!-- ================================================================== -->
  <!-- Reading view templates                                             -->
  <!-- ================================================================== -->
  <xsl:template match="sonnet">
    <!-- <sonnet> element has @id to make it target of link -->
    <section id="sonnet{count(preceding-sibling::sonnet) + 1}">
      <h2>
        <xsl:apply-templates select="@number"/>
      </h2>
      <xsl:if test="count(line) ne 14">
        <!-- Sonnets 99 and 126 do not have 14 lines -->
        <p class="line-count-warning">
          <xsl:text>Contains </xsl:text>
          <xsl:value-of select="count(line)"/>
          <xsl:text> lines</xsl:text>
        </p>
      </xsl:if>
      <xsl:choose>
        <!-- 
          Handle stanza structure of sonnets 99 and 126 individually, 
          default to three quatrains plus couplet
        -->
        <xsl:when test="position() eq 99">
          <ul>
            <xsl:apply-templates select="line[position() le 5]"/>
          </ul>
          <ul>
            <xsl:apply-templates select="line[position() ge 6 and position() le 9]"/>
          </ul>
          <ul>
            <xsl:apply-templates select="line[position() ge 10 and position() le 13]"/>
          </ul>
          <ul>
            <xsl:apply-templates select="line[position() gt 13]"/>
          </ul>
        </xsl:when>
        <xsl:when test="position() eq 126">
          <ul>
            <xsl:apply-templates select="line[position() = (1, 2)]"/>
          </ul>
          <ul>
            <xsl:apply-templates select="line[position() = (3, 4)]"/>
          </ul>
          <ul>
            <xsl:apply-templates select="line[position() = (5, 6)]"/>
          </ul>
          <ul>
            <xsl:apply-templates select="line[position() = (7, 8)]"/>
          </ul>
          <ul>
            <xsl:apply-templates select="line[position() = (9, 10)]"/>
          </ul>
          <ul>
            <xsl:apply-templates select="line[position() = (11, 12)]"/>
          </ul>
        </xsl:when>
        <xsl:otherwise>
          <ul>
            <xsl:apply-templates select="line[position() le 4]"/>
          </ul>
          <ul>
            <xsl:apply-templates select="line[position() ge 5 and position() le 8]"/>
          </ul>
          <ul>
            <xsl:apply-templates select="line[position() ge 9 and position() le 12]"/>
          </ul>
          <ul>
            <xsl:apply-templates select="line[position() gt 12]"/>
          </ul>
        </xsl:otherwise>
      </xsl:choose>
    </section>
  </xsl:template>
  <xsl:template match="line">
    <li>
      <xsl:value-of select="djb:use-curly-apostrophe(.)"/>
    </li>
  </xsl:template>
  <!-- ================================================================== -->
  <!-- Mode "toc" templates                                               -->
  <!-- ================================================================== -->
  <xsl:template match="sonnet" mode="toc">
    <li>
      <xsl:apply-templates select="line[1]" mode="toc"/>
    </li>
  </xsl:template>
  <xsl:template match="line" mode="toc">
    <!-- Use $linecount to test whether alert is needed; include in alert -->
    <xsl:variable name="linecount" as="xs:integer" select="count(../line)"/>
    <a href="#sonnet{count(../preceding-sibling::sonnet) + 1}">
      <xsl:value-of select="djb:use-curly-apostrophe(.)"/>
    </a>
    <xsl:text> (</xsl:text>
    <xsl:apply-templates select="../@number"/>
    <xsl:if test="$linecount ne 14">
      <xsl:text>; </xsl:text>
      <span class="line-count-warning">
        <xsl:text>contains </xsl:text>
        <xsl:value-of select="$linecount"/>
        <xsl:text> lines</xsl:text>
      </span>
    </xsl:if>
    <xsl:text>)</xsl:text>
  </xsl:template>
</xsl:stylesheet>
]]></code></pre>
      <p>The line numbering and the general layout are controlled with the following CSS (see the
        embedded comments for explanation):</p>
      <pre class="language-css"><code><![CDATA[:root {
  /* Properties that begin with -- function as variables */
  --sonnet-indent: .5em;
  background-color: #f4eee2;
}
main {
  /* Keep hr from spanning entire window*/
  width: fit-content;
}
h1,
h2 {
  /* Align with beginning of sonnet lines */
  padding-left: 1em;
}
hr {
  /* Use <hr/> instead of border because of semantic break */
  width: 95%;
  border: none;
  height: 1px;
  background-color: gray;
}
#reading > section {
  /* Line counting restarts for each <section> element that wraps a sonnet */
  counter-reset: lineno;
}
#reading ul {
  /* Turn off bullets, use variable defined at top
   * to set left padding */
  display: flex;
  padding-left: var(--sonnet-indent);
  flex-direction: column;
  list-style-type: none;
  margin: 0 0 1em 0;
}
#reading li {
  /* Flex to center smaller line number (see :before, below) vertically */
  counter-increment: lineno;
  margin-left: 1rem;
  display: flex;
  align-items: center;
}
#reading li:first-of-type:before {
  /* Number first line of each part of sonnet
   * Absolute position to remove from horizontal alignment of line content 
   * Outdent to place before line
   * Width is needed to make text-align work 
   * Flex (set on li) needed to center smaller number vertically */
  content: counter(lineno);
  margin-left: -2em;
  position: absolute;
  width: 1.5em;
  text-align: right;
  color: gray;
  font-size: smaller;
}
.line-count-warning {
  /* Line counts other than 14 are reported and highlighted */
  color: red;
}
p.line-count-warning {
  /* Align with sonnet number and start of lines */
  margin-left: var(--sonnet-indent);
}]]></code></pre>
    </section></body>
</html>
