<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:svg="http://www.w3.org/2000/svg">
    <!--#set var="title" value="SVG assignment #1 solution" -->
    <!--#config timefmt="%Y-%m-%dT%X%z" -->
    <head>
        <title><!--#echo var="title" --></title>
        <link rel="stylesheet" type="text/css" href="http://www.obdurodon.org/css/style.css" />
        <!--#include virtual="inc/dh-header.html" -->
        <style type="text/css">
            body * {
              line-height: 1.5 !important;
            }</style>
    </head>
    <body class="line-numbers">
        <!--#include virtual="inc/dh-boilerplate.html" -->
        <section>
            <h3>Overview</h3>
            <!--        <p>Although your task for this first assignment was to create the SVG objects by hand, in
            real life (and in subsequent assignments) we would use XSLT to do this for us. Below are
            two versions of the hand-drawn solution, without and then with variables. For the XSLT
            solution that we presented in class, see <a
                href="https://github.com/obdurodon/dh_course/tree/master/svg">our course GitHub
                repo</a>.</p>-->
            <p>Your task is to use the data from a mythical Best Stooge Ever contest to draw (by
                hand) an SVG bar chart of the results. In XML terms, the scores are:</p>
            <pre class="language-xml"><code>&lt;results&gt;
    &lt;stooge name="Curly"&gt;50&lt;/stooge&gt;
    &lt;stooge name="Larry"&gt;35&lt;/stooge&gt;
    &lt;stooge name="Moe"&gt;15&lt;/stooge&gt;
&lt;/results&gt;</code></pre>
            <p>For your bar chart, you’ll want to draw an <em>x</em> axis and <em>y</em> axis (using
                the SVG <code class="language-xml">&lt;line&gt;</code> element), three bars of
                different colors (using the SVG <code class="language-xml">&lt;rect&gt;</code>
                element), and labels on the axes or the bars for the stooges and the numerical
                values of their vote counts (using the SVG
                <code class="language-xml">&lt;text&gt;</code> element).</p>
        </section>
        <section>
            <h3>One solution</h3>
            <p>Here is one possible solution:</p>
            <pre class="language-xml"><code><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" width="200" height="250">
    <!-- Axes -->
    <line x1="25" y1="200" x2="205" y2="200" stroke="black" stroke-width="2" stroke-linecap="square"/>
    <line x1="25" y1="200" x2="25" y2="0" stroke="black" stroke-width="2" stroke-linecap="square"/>
    <!-- Ticks on Y axis -->
    <line x1="20" x2="25" y1="20" y2="20" stroke="black" stroke-width="2"/>
    <line x1="20" x2="25" y1="40" y2="40" stroke="black" stroke-width="2"/>
    <line x1="20" x2="25" y1="60" y2="60" stroke="black" stroke-width="2"/>
    <line x1="20" x2="25" y1="80" y2="80" stroke="black" stroke-width="2"/>
    <line x1="20" x2="25" y1="100" y2="100" stroke="black" stroke-width="2"/>
    <line x1="20" x2="25" y1="120" y2="120" stroke="black" stroke-width="2"/>
    <line x1="20" x2="25" y1="140" y2="140" stroke="black" stroke-width="2"/>
    <line x1="20" x2="25" y1="160" y2="160" stroke="black" stroke-width="2"/>
    <line x1="20" x2="25" y1="180" y2="180" stroke="black" stroke-width="2"/>
    <!-- Labels on Y axis -->
    <text x="18" y="20" text-anchor="end" dominant-baseline="central">90</text>
    <text x="18" y="40" text-anchor="end" dominant-baseline="central">80</text>
    <text x="18" y="60" text-anchor="end" dominant-baseline="central">70</text>
    <text x="18" y="80" text-anchor="end" dominant-baseline="central">60</text>
    <text x="18" y="100" text-anchor="end" dominant-baseline="central">50</text>
    <text x="18" y="120" text-anchor="end" dominant-baseline="central">40</text>
    <text x="18" y="140" text-anchor="end" dominant-baseline="central">30</text>
    <text x="18" y="160" text-anchor="end" dominant-baseline="central">20</text>
    <text x="18" y="180" text-anchor="end" dominant-baseline="central">10</text>
    <!-- Data rectangles and labels -->
    <rect x="25" y="100" width="40" height="100" fill="green" stroke="black" stroke-width="1"/>
    <text x="45" y="220" text-anchor="middle">Curly</text>
    <rect x="85" y="130" width="40" height="70" fill="blue" stroke="black" stroke-width="1"/>
    <text x="105" y="220" text-anchor="middle">Larry</text>
    <rect x="145" y="170" width="40" height="30" fill="red" stroke="black" stroke-width="1"/>
    <text x="165" y="220" text-anchor="middle">Moe</text>
</svg>]]></code></pre>
            <p>Most of this is self-explanatory, but the part that might be new is the
                <code class="language-xml">@stroke-linecap</code> attribute on the axis
                <code class="language-xml">&lt;line></code> elements. Without that setting, the axis
                lines don’t meet smoothly because the position values of a line describe the
                    <em>middle</em> of the line in terms of its stroke-width, so a 2px-wide line
                extends 1px to either side of the specified position value. You can see the effect
                if you increase the stroke width (here to a value of
                <code class="language-xquery">10</code>):</p>
            <pre class="language-xml"><code><![CDATA[<svg xmlns="http://www.w3.org/2000/svg" width="200" height="220">
    <!-- x and y axes -->
    <line x1="25" y1="200" x2="205" y2="200" stroke="black" stroke-width="10"
        stroke-linecap="square"/>
    <line x1="25" y1="200" x2="25" y2="0" stroke="black" stroke-width="10"
        stroke-linecap="square"/>
</svg>]]></code></pre>
            <svg xmlns="http://www.w3.org/2000/svg" width="200" height="220">
                <!-- x and y axes -->
                <line x1="25" y1="200" x2="205" y2="200" stroke="black" stroke-width="10"/>
                <line x1="25" y1="200" x2="25" y2="0" stroke="black" stroke-width="10"/>
            </svg>
            <p>Adding the <code class="language-xml">@stroke-linecap</code> attribute with the value
                <code class="language-xml">"square"</code> fixes the problem. Don’t think it doesn’t
                matter with a thin line, though; it’s visible even with thin lines, even if not as
                conspicuously as with thick ones, and attention to these sorts of details is part of
                the difference between a professional job and a careless one.</p>
            <section class="note">
                <p>It’s convenient to draw the X and Y axes as separate SVG
                    <code class="language-xml">&lt;line&gt;</code> elements because we think of them
                    as two lines, and as long as we remember to use the
                    <code class="language-xquery">@stroke-linecap</code> attribute to ensure that
                    they meet squarely we’ll get the output we want. As an alternative, though, we
                    could use the SVG <code class="language-xml">&lt;polyline&gt;</code> element.
                    The <code class="language-xml">&lt;polyline&gt;</code> element draws connected
                    line segments, so instead of the two
                    <code class="language-xml">&lt;line&gt;</code> elements for the axes we could
                    have used just the single following
                    <code class="language-xml">&lt;polyline&gt;</code> element:</p>
                <pre class="language-xml"><code><![CDATA[<polyline points="205,200 25,200 25,0" fill="none" stroke="black" stroke-width="2"/>]]></code></pre>
                <p>The value of the <code class="language-xquery">@points</code> attribute is a
                    sequence of X, Y coordinates, with the X and Y values separated by commas and
                    the coordinate pairs separated by spaces. The example above says to start by
                    drawing a line segment from 205,200 to 25,200 (this is the X axis) and then
                    continue from 25,200 with a segment to 25,0 (this is the Y axis). One advantage
                    of using <code class="language-xml">&lt;polyline&gt;</code> is that you don’t
                    have to think about specifying
                    <code class="language-xquery">@stroke-linecap</code> where your X and Y axes
                    meet, since polyline line segments are naturally connected smoothly. But because
                    polylines can be used to describe shapes that might be filled, you do have to
                    specify a <code class="language-xquery">"none"</code> value for the
                    <code class="language-xquery">@fill</code> attribute. (Try removing it to see
                    the effect.) You can read more about
                    <code class="language-xml">&lt;polyline&gt;</code> at <a
                        href="https://developer.mozilla.org/en-US/docs/Web/SVG/Element/polyline"
                        >https://developer.mozilla.org/en-US/docs/Web/SVG/Element/polyline</a>.</p>
            </section>
        </section>
        <section>
            <h3>Sample output</h3>
            <p>The output should look something like:</p>
            <svg xmlns="http://www.w3.org/2000/svg" width="200" height="250">
                <!-- Axes -->
                <line x1="25" y1="200" x2="205" y2="200" stroke="black" stroke-width="2"
                    stroke-linecap="square"/>
                <line x1="25" y1="200" x2="25" y2="0" stroke="black" stroke-width="2"
                    stroke-linecap="square"/>
                <!-- Ticks on Y axis -->
                <line x1="20" x2="25" y1="20" y2="20" stroke="black" stroke-width="2"/>
                <line x1="20" x2="25" y1="40" y2="40" stroke="black" stroke-width="2"/>
                <line x1="20" x2="25" y1="60" y2="60" stroke="black" stroke-width="2"/>
                <line x1="20" x2="25" y1="80" y2="80" stroke="black" stroke-width="2"/>
                <line x1="20" x2="25" y1="100" y2="100" stroke="black" stroke-width="2"/>
                <line x1="20" x2="25" y1="120" y2="120" stroke="black" stroke-width="2"/>
                <line x1="20" x2="25" y1="140" y2="140" stroke="black" stroke-width="2"/>
                <line x1="20" x2="25" y1="160" y2="160" stroke="black" stroke-width="2"/>
                <line x1="20" x2="25" y1="180" y2="180" stroke="black" stroke-width="2"/>
                <!-- Labels on Y axis -->
                <text x="18" y="20" text-anchor="end" dominant-baseline="central">90</text>
                <text x="18" y="40" text-anchor="end" dominant-baseline="central">80</text>
                <text x="18" y="60" text-anchor="end" dominant-baseline="central">70</text>
                <text x="18" y="80" text-anchor="end" dominant-baseline="central">60</text>
                <text x="18" y="100" text-anchor="end" dominant-baseline="central">50</text>
                <text x="18" y="120" text-anchor="end" dominant-baseline="central">40</text>
                <text x="18" y="140" text-anchor="end" dominant-baseline="central">30</text>
                <text x="18" y="160" text-anchor="end" dominant-baseline="central">20</text>
                <text x="18" y="180" text-anchor="end" dominant-baseline="central">10</text>
                <!-- Data rectangles and labels -->
                <rect x="25" y="100" width="40" height="100" fill="green" stroke="black"
                    stroke-width="1"/>
                <text x="45" y="220" text-anchor="middle">Curly</text>
                <rect x="85" y="130" width="40" height="70" fill="blue" stroke="black"
                    stroke-width="1"/>
                <text x="105" y="220" text-anchor="middle">Larry</text>
                <rect x="145" y="170" width="40" height="30" fill="red" stroke="black"
                    stroke-width="1"/>
                <text x="165" y="220" text-anchor="middle">Moe</text>
            </svg>
        </section>
    </body>
</html>
