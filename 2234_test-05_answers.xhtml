<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
    <!--#set var="title" value="Text #5: XSLT answers" -->
    <!--#config timefmt="%Y-%m-%dT%X%z" -->
    <head>
        <title><!--#echo var="title" --></title>
        <!--#include virtual="inc/dh-header.html" -->
    </head>
    <body class="line-numbers">
        <!--#include virtual="inc/dh-boilerplate.html" -->
        <section>
            <h3>The task</h3>
            <p>Your task was to write XSLT that will create a reading view of our <a
                    href="yellowFairy.xml">Yellow Fairy</a> collection of stories in HTML. The <a
                    href="2234_test-05_xslt.xhtml">test instructions</a> provide general guidelines
                along with a list of required and optional tasks.</p>
        </section>
        <section>
            <h3>Basic solution</h3>
            <p>The following XSLT implements all of the required tasks. We explain how the parts
                work with embedded XML comments. (We always comment our stylesheets, but because
                this is the answer to a test question, it includes more commentary than we would
                normally use.) You can read our basic output at <a href="2234_basic-output.xhtml"
                    >http://dh.bactriana.org/2234_basic-output.xhtml</a>.</p>
            <pre class="language-xml"><code><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:math="http://www.w3.org/2005/xpath-functions/math" xmlns="http://www.w3.org/1999/xhtml"
    exclude-result-prefixes="#all" version="3.0">
    <xsl:output method="xhtml" html-version="5" omit-xml-declaration="no" include-content-type="no"
        indent="yes"/>
    <!-- ================================================================ -->
    <!-- Create HTML superstructure                                       -->
    <!-- ================================================================ -->
    <xsl:template match="/">
        <html>
            <head>
                <title>
                    <xsl:apply-templates select="//metaData/title"/>
                </title>
            </head>
            <body>
                <xsl:apply-templates select="//metaData"/>
                <section>
                    <h2>Table of Contents</h2>
                    <ul>
                        <!-- ============================================ -->
                        <!-- Mode to processes <story> elements in toc    -->
                        <!--   differently than in reading-view section   -->
                        <!-- ============================================ -->
                        <xsl:apply-templates select="//story" mode="toc"/>
                    </ul>
                </section>
                <!-- ==================================================== -->
                <!-- Separate toc from body with horizontal rule          -->
                <!-- ==================================================== -->
                <hr/>
                <!-- ==================================================== -->
                <!-- Each story will be a separate <section>, with all    -->
                <!--    stories wrapped in <main>                         -->
                <!-- ==================================================== -->
                <main>
                    <h2>Stories</h2>
                    <xsl:apply-templates select="//book"/>
                </main>
            </body>
        </html>
    </xsl:template>
    <!-- ================================================================ -->
    <!-- Metadata (title, author, editor)                                 -->
    <!-- HTML header hierarchy:                                           -->
    <!--   main title <h1>                                                -->
    <!--   author + editor <h2>                                           -->
    <!--   story title <h3>                                               -->
    <!--   origin (if present) <h4>                                       -->
    <!-- ================================================================ -->
    <xsl:template match="metaData">
        <h1>
            <xsl:apply-templates select="title"/>
        </h1>
        <h2>
            <xsl:apply-templates select="author"/>
            <xsl:text>, </xsl:text>
            <xsl:apply-templates select="editor"/>
        </h2>
        <hr/>
    </xsl:template>
    <xsl:template match="metaData/title">
        <!-- ============================================================= -->
        <!-- More specific than the template that matches "title", so     -->
        <!--   processes the main title differently than the story titles -->
        <!-- ============================================================ -->
        <xsl:apply-templates/>
    </xsl:template>

    <!-- ================================================================ -->
    <!-- toc mode for list of tales                                       -->
    <!-- ================================================================ -->
    <!-- We use a mode because we need to process <title>                 -->
    <!--     elements differently so we can create a TOC using the        -->
    <!--     <title> elements (as an <li>) than in the main reading       -->
    <!--     view (see below)                                             -->
    <!-- We don't have our own template for <title> elements in toc mode, -->
    <!--     but we specify a mode so that the built-in will just give us -->
    <!--     the text                                                     -->
    <!-- ================================================================ -->
    <xsl:template match="story" mode="toc">
        <li>
            <xsl:apply-templates select="title" mode="toc"/>
        </li>
    </xsl:template>

    <!-- ================================================================ -->
    <!-- Reading text of stories                                          -->
    <!-- ================================================================ -->
    <xsl:template match="story">
        <!-- ============================================================ -->
        <!-- Separate stories with <hr/>                                  -->
        <!-- ============================================================ -->
        <hr/>
        <section>
            <xsl:apply-templates/>
        </section>
    </xsl:template>
    <xsl:template match="title">
        <!-- ============================================================ -->
        <!-- Matches only story titles for reading view                   -->
        <!--   Main title is matched by metaData/title template           -->
        <!--   Story titles for toc are matched in toc mode               -->
        <!-- ============================================================ -->
        <h3>
            <xsl:apply-templates/>
        </h3>
    </xsl:template>
    <xsl:template match="origin">
        <h4>
            <xsl:apply-templates/>
        </h4>
    </xsl:template>
    <xsl:template match="p">
        <!-- ============================================================ -->
        <!-- Input paragraphs are transformed in HTML output paragraphs   -->
        <!--    to  avoid The Dreaded Wall Of Text                        -->
        <!-- ============================================================ -->
        <p>
            <xsl:apply-templates/>
        </p>
    </xsl:template>
</xsl:stylesheet>
]]></code></pre>
        </section>
        <section>
            <h3>Solution with bonus tasks</h3>
            <p>The following enhanced solution implements the bonus tasks. You can read our the
                output of this bonus implementation at <a href="2234_bonus-output.xhtml"
                    >http://dh.bactriana.org/2234_bonus-output.xhtml</a>.</p>
            <pre class="language-xml"><code><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:math="http://www.w3.org/2005/xpath-functions/math" xmlns="http://www.w3.org/1999/xhtml"
    exclude-result-prefixes="#all" version="3.0">
    <xsl:output method="xhtml" html-version="5" omit-xml-declaration="no" include-content-type="no"
        indent="yes"/>
    <!-- ================================================================ -->
    <!-- Create HTML superstructure                                       -->
    <!-- ================================================================ -->
    <xsl:template match="/">
        <html>
            <head>
                <title>
                    <xsl:apply-templates select="//metaData/title"/>
                </title>
            </head>
            <body>
                <xsl:apply-templates select="//metaData"/>
                <!-- ============================================================ -->
                <!-- Link To stylesheet                                           -->
                <!-- ============================================================ -->
                <link rel="stylesheet" type="text/css" href="yellowFairy.css"/>
                <section>
                    <h2>Table of Contents</h2>
                    <ul>
                        <!-- ============================================ -->
                        <!-- Mode to processes <story> elements in toc    -->
                        <!--   differently than in reading-view section   -->
                        <!-- ============================================ -->
                        <xsl:apply-templates select="//story" mode="toc"/>
                    </ul>
                </section>
                <!-- ==================================================== -->
                <!-- Separate toc from body with horizontal rule          -->
                <!-- ==================================================== -->
                <hr/>
                <!-- ==================================================== -->
                <!-- Each story will be a separate <section>, with all    -->
                <!--    stories wrapped in <main>                         -->
                <!-- ==================================================== -->
                <main>
                    <h2>Stories</h2>
                    <xsl:apply-templates select="//book"/>
                </main>
                <section>
                    <!-- ================================================ -->
                    <!-- Create heading and generate footnotes at the end -->
                    <!-- of the document in a single ordered list, where  -->
                    <!-- the number in the list corresponds to the        -->
                    <!-- footnote number.                                 -->
                    <!-- ================================================ -->
                    <hr/>
                    <h2>Contributors</h2>
                    <ol>
                        <xsl:apply-templates select="//origin" mode="foot"/>
                    </ol>
                </section>
            </body>
        </html>
    </xsl:template>
    <!-- ================================================================ -->
    <!-- Metadata (title, author, editor)                                 -->
    <!-- HTML header hierarchy:                                           -->
    <!--   main title <h1>                                                -->
    <!--   author + editor <h2>                                           -->
    <!--   story title <h3>                                               -->
    <!--   origin (if present) <h4>                                       -->
    <!-- ================================================================ -->
    <xsl:template match="metaData">
        <h1>
            <xsl:apply-templates select="title"/>
        </h1>
        <h2>
            <xsl:apply-templates select="author"/>
            <xsl:text>, </xsl:text>
            <xsl:apply-templates select="editor"/>
        </h2>
        <hr/>
    </xsl:template>
    <xsl:template match="metaData/title">
        <!-- ============================================================= -->
        <!-- More specific than the template that matches "title", so     -->
        <!--   processes the main title differently than the story titles -->
        <!-- ============================================================ -->
        <xsl:apply-templates/>
    </xsl:template>

    <!-- ================================================================ -->
    <!-- toc mode for list of tales and @href for TOC                     -->
    <!-- ================================================================ -->
    <!-- We use a mode because we need to process <title>                 -->
    <!--     elements differently so we can create a TOC using the        -->
    <!--     <title> elements (as an <li>) than in the main reading       -->
    <!--     view (see below)                                             -->
    <!-- We don't have our own template for <title> elements in toc mode, -->
    <!--     but we specify a mode so that the built-in will just give us -->
    <!--     the text                                                     -->
    <!-- ================================================================ -->
    <!-- Select stories and generate an @href value begins with an s      -->
    <!-- (for stories) and count the position of the stories to generate  -->
    <!--   an @href value                                                 -->
    <!-- ================================================================ -->
    <xsl:template match="story" mode="toc">
        <li>
            <a href="#s{count(preceding-sibling::story)}">
                <xsl:apply-templates select="title" mode="toc"/>
            </a>
        </li>
    </xsl:template>

    <!-- ================================================================ -->
    <!-- Reading text of stories                                          -->
    <!-- ================================================================ -->
    <xsl:template match="story">
        <!-- ============================================================ -->
        <!-- Separate stories with <hr/>                                  -->
        <!-- Use preceding sibling stories to construct an @id that will  -->
        <!--   match the link in the table of contents.                   -->
        <!-- Don't process origin here; process it with title             -->
        <!-- ============================================================ -->
        <hr/>
        <section id="s{count(preceding-sibling::story)}">
            <xsl:apply-templates select="* except origin"/>
        </section>
    </xsl:template>
    <xsl:template match="title">
        <!-- ============================================================ -->
        <!-- Matches only story titles for reading view                   -->
        <!--   Main title is matched by metaData/title template           -->
        <!--   Story titles for toc are matched in toc mode               -->
        <!-- Process origin inside the title <h3> if present              -->
        <!-- ============================================================ -->
        <h3>
            <xsl:apply-templates select="node(), following-sibling::origin"/>
        </h3>
    </xsl:template>
    <xsl:template match="p">
        <!-- ============================================================ -->
        <!-- Input paragraphs are transformed in HTML output paragraphs   -->
        <!--    to  avoid The Dreaded Wall Of Text                        -->
        <!-- ============================================================ -->
        <p>
            <xsl:apply-templates/>
        </p>
    </xsl:template>
    <!-- ================================================================== -->
    <!-- Origins inside reading view                                        -->
    <!-- ================================================================== -->
    <xsl:template match="origin">
        <!-- ================================================================ -->
        <!-- We’ve decided to render all external authors together in         -->
        <!-- one list at the end of the document,so we need to number them    -->
        <!-- continuously. There are several ways to do that, and the method  -->
        <!-- we chose was to use <xsl:number>; setting the value of the       -->
        <!-- @level attribute to "any" creates a single continuous list of    -->
        <!-- all origin numbers in the entire document. We wrap the value in  -->
        <!-- an HTML <sup> element, which creates a traditional superscript   -->
        <!-- footnote number. The authors themselves are then generated as a  -->
        <!-- numbered list at the bottom in a "foot" mode.                    -->
        <!-- ================================================================ -->
        <sup>
            <a href="#{generate-id()}">
                <xsl:text>[</xsl:text>
                <xsl:number level="any"/>
                <xsl:text>]</xsl:text>
            </a>
        </sup>
    </xsl:template>
    <!-- ================================================================== -->
    <!-- Origin mode                                                        -->
    <!-- We don't create our own numbers here because they are in an        -->
    <!-- HTML <ol>, which does the sequential numbering for us              -->
    <!-- ================================================================== -->
    <xsl:template match="origin" mode="foot">
        <li id="{generate-id()}">
            <xsl:apply-templates/>
        </li>
    </xsl:template>
</xsl:stylesheet>]]>
            </code>
            </pre>
        </section></body>
</html>
