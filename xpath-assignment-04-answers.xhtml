<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
    <!--#set var="title" value="XPath assignment #4 answers" -->
    <!--#config timefmt="%Y-%m-%dT%X%z" -->
    <head>
        <title><!--#echo var="title" --></title>
        <!--#include virtual="inc/dh-header.html" -->
        <style type="text/css">
            li > section {
              margin-top: 1em;
              margin-bottom: 1em;
            }</style>
    </head>
    <body class="line-numbers">
        <!--#include virtual="inc/dh-boilerplate.html" -->
        <p>You can find an XML (TEI) version of Shakespeare’s <cite>Hamlet</cite> at <a
                href="bad-hamlet.xml">http://dh.obdurodon.org/bad-hamlet.xml</a>. We’ve deliberately
            damaged some of the markup in this edition to introduce some inconsistencies, but the
            file is well-formed XML, which means that you can use XPath to explore it. You should
            download this file to your computer (typically that means right-clicking on the link and
            selecting <q>save as</q>) and open it in &lt;oXygen/&gt;.</p>
        <p>Prepare your answers to the following questions in a markdown file upload it to Canvas as
            an attachment. As always, code snippets (including XPath snippets) in markdown must be
            surrounded with backticks.</p>
        <p>Some of these tasks are thought-provoking, and even difficult. If you get stuck, do the
            best you can, and if you can’t get a working answer, give the answers you tried and
            explain where they failed to get the results you wanted. As always, you are encouraged
            to ask questions in the <b>#xpath</b> channel in Slack, but because you want to make
            progress in learning to debug your own code, your questions should tell us what you
            tried, what you expected, <em>exactly</em> what you got instead (not just <q>didn’t
                work</q> or <q>got an error</q>), and what you think the source of the problem is.
            Sometimes writing that sort of request for advice that will help you figure out what’s
            wrong on your own (see <a href="https://en.wikipedia.org/wiki/Rubber_duck_debugging"
                >Rubber duck debugging</a>), and even when it doesn’t, it will help us identify the
            difficult moments.</p>
        <p>These tasks require the use of path expressions, predicates, and functions. References to
            Kay are to the Michael Kay book; there’s a link in our online course description to a
            PDF version accessible through the Pitt library system. There may be more than one
            possible answer.</p>
        <p>Using the <cite>Bad Hamlet</cite> document and the XPath browser window in
            &lt;oXygen/&gt;, construct XPath expressions that will do the following (give the full
            XPath expressions in your answers, and not just the results):</p>
        <ol>
            <li><p>What XPath will return a hyphen-separated list of all characters without
                    duplicates? The resulting list will look something like: </p>
                <pre>Claudius-Hamlet-Polonius ...</pre>
                <p>Our solution uses <code class="language-xquery">string-join()</code> (alternative
                    solutions may also require
                    <code class="language-xquery">distinct-values()</code>). Note that there are
                    several ways to identify the characters in this markup, including the
                    <code class="language-xml">&lt;castList&gt;</code> element, the
                    <code class="language-xml">&lt;speaker&gt;</code> elements, and the
                    <code class="language-xquery">@who</code> atribute on the
                    <code class="language-xml">&lt;sp&gt;</code> element. Which should you use and
                    why?</p>
                <p>The simplest solution is
                    <code class="language-xquery">string-join(//role, '-')</code> (or, with the
                    arrow operator,
                    <code class="language-xquery"><?oxy_custom_start type="oxy_content_highlight" color="255,255,0"?>//role => string-join('-')<?oxy_custom_end?></code>.
                    This doesn’t use <code class="language-xquery">distinct-values()</code>, since
                    the values of <code class="language-xml">&lt;role></code> elements are already
                    unique. In addition to uniqueness, it also separates characters who speak in
                    unison. For example, if you use <code class="language-xml">&lt;speaker></code>
                    elements you’ll find values like
                    <code class="language-xml">&lt;speaker>Rosencrantz and Guildenstern&lt;/speaker></code>,
                    and that isn’t a string you want in your list of characters. Furthermore, the
                    <code class="language-xml">&lt;speaker></code> and
                    <code class="language-xquery">@who</code> values contain only speaking
                    characters, so using those would miss non-speaking characters.</p></li>
            <li><p>Most metrical lines (<code class="language-xml">&lt;l&gt;</code>) have an
                    <code class="language-xquery">@xml:id</code> attribute with a value like
                        <q>sha-ham101010</q>, ending in a six-digit number. The first digit is the
                    act, the next two the scene, and the last three the line in the scene. Some
                    metrical lines are split across multiple speakers, and in that case the
                    six-digit number in the <code class="language-xquery">@xml:id</code> value is
                    followed by <q>I</q> (initial part), <q>M</q> (middle part), or <q>F</q> (final
                    part). In a few places there may be more than one middle part, and in those
                    cases the <q>M</q> is followed by a one-digit number. For example, one of
                    Hamlet’s lines is:</p>
                <pre class="language-xml"><code>&lt;l xml:id="sha-ham502277M2" n="277"&gt;One.&lt;/l&gt;</code></pre>
                <p> which is the second middle part. What XPath will return the number of
                    <code class="language-xml">&lt;l&gt;</code> elements that are middle parts? Our
                    solution uses <code class="language-xquery">count()</code> and
                    <code class="language-xquery">contains()</code>.</p>
                <p><code class="language-xquery">//l[contains(@xml:id, 'M')] => count()</code></p>
                <p>As we explained, any line that is a middle part will have the character <q>M</q>
                    in its <code class="language-xquery">@xml:id</code>. To test whether a line's
                        <em>attribute</em> has this character, we use the
                    <code class="language-xquery">contains()</code> function inside a predicate. The
                    <code class="language-xquery">contains()</code> function checks whether its
                    second argument exists within the first, that is, whether the capital <q>M</q>
                    is anywhere in the value of <code class="language-xquery">@xml:id</code>, which
                    is a string.</p>
                <p>To find all of these lines, we search on the descendant axis, starting from the
                    document node, with the <code class="language-xquery">//</code> shorthand, and
                    append the predicate
                    <code class="language-xquery">[contains(@xml:id, 'M')]</code>. We then use the
                    arrow operator with the <code class="language-xquery">count()</code> function
                    function to count them.</p></li>
            <li><p>Sometimes Rosencrantz speaks by himself and sometimes he speaks in unison with
                    Guildenstern. What XPath finds all of the speeches by Rosencrantz, whether alone
                    or together with Guildenstern? Our solution uses a single instance of
                    <code class="language-xquery">contains()</code>.</p>
                <p><code class="language-xquery">//sp[contains(@who, "Rosencrantz")]</code></p>
                <p>This solution is very similar to the solution to the previous question, except
                    that it uses the function <code class="language-xquery">contains()</code> to
                    search for the presence of an entire string instead of just a single character.
                    It is important to know that <code class="language-xquery">contains()</code> is
                    capable of doing both. This XPath finds all of the
                    <code class="language-xml">&lt;sp&gt;</code> elements and filters them by
                    determining whether the string <q>Rosencrantz</q> occurs anywhere in the
                    <code class="language-xquery">@who</code> attribute, indicating that Rosencrantz
                    is speaking. Where Rosencrantz and Guildenstern speak together, the
                    <code class="language-xquery">@who</code> value is instead <q>Rosencrantz
                        Guildenstern"</q>, but that also contains the string <q>Rosencrantz</q>.</p>
                <p>The approach above will produce false positives if the play also has a character
                    with a name like <q>Rosencrantzenfeld</q> because that also contains
                        <q>Rosencrantz</q> as a substring. You can (= should) use the
                    <code class="language-xquery">contains-token()</code> function instead of
                    <code class="language-xquery">contains()</code>to avoid that peril.</p>
                <section class="note">
                    <p>The <code class="language-xquery">contains-token()</code> function matches a
                        substring only if it is a separate word, that is, not a substring of another
                        word. In that way the <code class="language-xquery">contains-token()</code>
                        function is a compact and legible way of performing the same logic as
                        <code class="language-xquery">//sp[tokenize(@who) = 'Rosencrantz']</code>.
                        This longer, less legible version uses the
                        <code class="language-xquery">tokenize()</code> function to split the value
                        of the <code class="language-xquery">@who</code> attribute into word tokens
                        on whitespace (whitespace is the default separator for the
                        <code class="language-xquery">tokenize()</code> function if none is
                        specified explicitly) and it then tests whether any of the tokens is equal
                        to the string <q>Rosencrantz</q>.</p>
                    <p>The <code class="language-xquery">contains-token()</code> function is new in
                        XPath 3.0, so it is not included in Michael Kay’s book, which documents
                        XPath and XSLT only through version 2.0.</p>
                </section>
            </li>
            <li><p>The <code class="language-xquery">string-length()</code> function can be used in
                    two ways. You can wrap it around an argument, so that, for example,
                    <code class="language-xquery">string-length('Hi, Mom!')</code> will return 8,
                    the length in character count of the string inside the quotation marks. It can
                    also be used as part of a path expression, so that, for example, if the XPath
                    <code class="language-xquery">//sp</code> returns a sequence of all
                    <code class="language-xml">&lt;sp&gt;</code> elements,
                    <code class="language-xquery">//sp/string-length(.)</code> returns a sequence of
                    the lengths of all <code class="language-xml">&lt;sp&gt;</code> elements as
                    measured by counting characters. This works by finding all of the
                    <code class="language-xml">&lt;sp&gt;</code> elements and then (next path step)
                    getting the string length of each one. Remember that the dot inside the
                    parentheses refers to the current context node, which is the member of the
                    sequence of <code class="language-xml">&lt;sp&gt;</code> nodes that is being
                    processed at the moment. We need to use this subterfuge because
                    <code class="language-xquery">string-length(//sp)</code> generates an error. The
                    problem is that <code class="language-xquery">string-length()</code> can take
                    only a single argument, and <code class="language-xquery">//sp</code> returns
                    more than one item. Putting the
                    <code class="language-xquery">string-length()</code> function on its own path
                    step with a dot inside means that it applies once for every
                    <code class="language-xml">&lt;sp&gt;</code> element, and that each time it
                    applies, it has just a single argument.</p>
                <p>Use this information to identify an XPath that finds the length of the longest
                    speech. What length does it return? Our solution uses
                    <code class="language-xquery">string-length()</code> and
                    <code class="language-xquery">max()</code>.</p>
                <pre class="language-xquery"><code>max(//sp/string-length(.))</code></pre>
                <p>We can read this from the inside out as <q>first find all
                        <code class="language-xml">&lt;sp&gt;</code> elements in the document; then,
                        for each of them, count its length in characters; then, for the sequence of
                        lengths (all of which are integers) return only the longest</q>. Because we
                    cannot find the string-length of more than one item at a time, we navigate to
                    all of the <code class="language-xml">&lt;sp&gt;</code> elements in the play on
                    the descendant axis with the <code class="language-xquery">//</code> shorthand,
                    and then take a step to use the
                    <code class="language-xquery">string-length()</code> function and use
                    <code class="language-xquery">.</code> to refer to the current
                    <code class="language-xml">&lt;sp&gt;</code> for each one in turn. Wrapping the
                    <code class="language-xquery">max()</code> function around the XPath that
                    produces this sequence of values will return the maximum value in that sequence,
                    that is, the maximum length of any speech, which is 5248.</p>
                <p>We find this much easier to read when we write it using the simple map and arrow
                    operators:</p>
                <pre class="language-xquery"><code>//sp ! string-length(.) => max()</code></pre>
                <p>By the way, this is a naive and textually incorrect way to measure the length of
                    a speech. It includes the content of any embedded
                    <code class="language-xml">&lt;speaker&gt;</code> or
                    <code class="language-xml">&lt;stage&gt;</code> elements, which aren’t part of
                    the spoken text, and it also includes any whitespace characters that might have
                    been present because of indentation during pretty-printing. How might you
                    measure the length of a speech in a more textually meaningful way, and how would
                    you do that using XPath?</p>
            </li>
            <li>
                <p><em>Optional, challenging question:</em> Given the preceding solution, how can
                    you use that XPath to retrieve the longest
                    <code class="language-xml">&lt;sp&gt;</code> itself? No fair checking the length
                    and then writing a separate XPath that looks for that number. Your answer must
                    find the longest speech without your knowing how long it is. Our solution
                    doesn’t require any additional functions beyond the ones used in #4, but it does
                    use a complicated predicate.</p>
                <p><code class="language-xquery">//sp[string-length(.) eq max(//sp ! string-length(.))]</code></p>
                <p>Since the value returned by the previous solution is just a number, we can use it
                    in a predicate to compare against the length of any speech that we are looking
                    at. We first find the speeches and then check one by one whether the length of
                    any of them is equal to the maximum length of all speeches in the play. This
                    works because even within a predicate the
                    <code class="language-xquery">//</code> starts its search from the root of the
                    document, so the comparison is to the maximal length of all speeches.</p>
                <p>It is also possible to find the longest speech without building on #4. An
                    expression that does that is:
                    <code class="language-xquery">//sp[not(string-length(.) &amp;lt; //sp/string-length(.))]</code>
                    This takes advantage of the fact that when we use the <em>general
                        comparison</em> operator <code class="language-xml">&lt;</code> (which we
                    have to spell with the <em>character entity</em>
                    <code class="language-xquery">&amp;lt;</code> because it’s inside an attribute
                    value, where a literal <code class="language-xml">&lt;</code> would not be well
                    formed), the comparison returns <code class="language-xquery">true</code> if
                        <em>any</em> item on the left side of the operator is less than <em>any</em>
                    item on the right (see the discussion of General comparison at the bottom of our
                        <a>XPath functions we use most</a>). The right side of our comparison here
                    is a sequence of integers that represent the lengths of all speeches, and the
                    item on the left is the integer length of the speech we’re looking at at the
                    moment (we look at each one separately, because that’s how predicates work). The
                    only speech that is not shorter than at least one of the sequence of all
                    speeches in the play is the one that is itself the longest, so our test will
                    pick out just that one. As you gain more experience with using general
                    comparison operators to compare sequences to one another this type of logic will
                    grow more intuitive.</p>
                <p>We don’t recommend the following alternative because it requires an extra
                    statement, but it’s worthwhile knowing about the XPath
                    <code class="language-xquery">let</code> statement:</p>
                <pre class="language-xquery"><code>let $longest := max(//sp/string-length(.))
return //sp[string-length(.) eq $longest]</code></pre>
                <p>The <code class="language-xquery">let</code> statement defines a variable, and in
                    this case, we create a variable called
                    <code class="language-xquery">$longest</code> (variable names in XPath begin
                    with a dollar sign) which we set equal to the value of the longest speech, which
                    is the integer 5248. The <dfn>binding operator</dfn>, which binds the value of
                    the the expression on its right to the variable name on its left, is a colon
                    followed by an equal sign (<code class="language-xquery">:=</code>), and not
                    just an equal sign (as in some other programming languages). The binding
                    operator is sometimes called the <dfn>walrus operator</dfn> because it looks
                    like the eyes and tusks of a <a
                        href="https://www.imago-images.com/st/0090569233">walrus lying on its
                        side</a>—at least if you have a lively imagination.</p>
                <p>A <code class="language-xquery">let</code> statement must be paired with a
                    <code class="language-xquery">return</code> statement, which normally uses the
                    variable to compute the value of an XPath expression, so in this case the
                    <code class="language-xquery">return</code> statement returns a sequence of all
                    <code class="language-xml">&lt;sp&gt;</code> elements with a string length equal
                    to 5248. You can write the entire expression on one line if you prefer; we’ve
                    broken it over two lines because we find it easier to read that way.</p>
            </li>
            <li><p><em>Optional, very challenging question:</em> What XPath produces a numbered list
                    of all characters, without any duplicates, which should look something
                    like:</p><ol style="list-style-type: decimal; margin-bottom: 1em;">
                    <li>Claudius</li>
                    <li style="margin-top: 0;">Hamlet</li>
                    <li style="margin-top: 0;">Polonius</li>
                    <li style="margin-top: 0;">...</li>
                </ol>
                <p>There are several possible solutions, each of which raises issues that you may
                    not have seen before. If you get an error message, try to figure out what it
                    means and how to resolve it.</p>
                <p>One solution is
                    <code class="language-xquery">//role ! concat(position(), ". " ,.)</code>. We
                    retrieve all <code class="language-xml">&lt;role></code> elements and then, for
                    each one, return a concatenation of its position in the sequence of
                    <code class="language-xml">&lt;role></code> elements (using the
                    <code class="language-xquery">position()</code> function to get the position of
                    the current context node in the sequence selected by the preceding path step), a
                    literal dot followed by a space, and then the
                    <code class="language-xml">&lt;role></code> element itself. The
                    <code class="language-xquery">concat() </code>function automatically atomizes
                    its arguments, which is to say that when we pass it a
                    <code class="language-xml">&lt;role></code> element, it converts it to its
                    atomic (string) value (that is, it throws away the markup and just gives us back
                    the character content), so that we wind up with results like “1. Claudius”,
                    which is what we want.</p>
                <p>There is, alternatively, a <dfn>concatenation operator</dfn>, spelled
                    <code class="language-xquery">||</code>, that you can use instead of the
                    <code class="language-xquery">concat()</code> function. The expression with that
                    operator would look like
                    <code class="language-xquery">//role ! (position() || ". " || .)</code>.</p>
                <p>If we get the characters using <code class="language-xml">&lt;speaker></code> or
                    <code class="language-xquery">@who</code> values instead of
                    <code class="language-xml">&lt;role></code>, we need to deduplicate them with
                    <code class="language-xquery">distinct-values()</code>, and the the expression
                    would be
                    <code class="language-xquery">distinct-values(//speaker) ! concat(position(), ". " ,.)</code>. </p>
                <p>Finally, instead of iterating over the roles or distinct
                    <code class="language-xml">&lt;speaker&gt;</code> or
                    <code class="language-xquery">@who</code> values and returning their positions
                    and string values, as we do above, we can iterate over the positions and return
                    the same thing. The expression in that case would be</p>
                <pre class="language-xquery"><code>for $i in (1 to count(//role)) 
return concat($i, ". ", (//role)[$i])</code></pre>
                <p>The <code class="language-xquery">for</code> expression iterates over a sequence
                    and does something once for each member of the sequence. The sequence over which
                    it iterates is a sequence of integers from <q>1</q> through however many
                    characters there are in the play (there are 37, which XPath determines by
                    counting the number of <code class="language-xml">&lt;role&gt;</code> elements).
                    We use the <code class="language-xquery">to</code> operator, which we haven’t
                    used before, as an instruction to generate the sequence of integers for us
                    dynamically. If there were, say, only 5 characters in the play, the expression
                    <code class="language-xquery">1 to count(//role)</code> would be equivalent to
                    the sequence <code class="language-xquery">(1,2,3,4,5)</code>.</p>
                <p>Although <code class="language-xquery">for $i in (1 to count(//role))</code> is
                    just setting the variable <code class="language-xquery">$i</code> to a different
                    integer value each time it loops, on each pass through the
                    <code class="language-xquery">for</code> loop
                    <code class="language-xquery">(//role)[$i]</code> will point to a different
                    character in the play. On the first pass, when
                    <code class="language-xquery">$i</code> equals <q>1</q>,
                    <code class="language-xquery">(//role)[$i]</code> means
                    <code class="language-xquery">(//role)[1]</code>, so it points to the first
                    character in the sequence returned by
                    <code class="language-xquery">//role</code>. On the second pass, the number
                    value is <q>2</q> and <code class="language-xquery">(//role)[$i]</code> means
                    <code class="language-xquery">(//role)[2]</code>, and points to the second
                    character. This is what lets us generate our numbered list; both the numbers and
                    the pointers into the list of characters are incremented by one on each pass
                    through the loop. You can read more about how this works in <a
                        href="http://xsltbyexample.blogspot.com/2010/05/obtain-position-from-for-expression-in.html"
                        title="Referring to position with the for expression in XPath"
                        >http://xsltbyexample.blogspot.com/2010/05/obtain-position-from-for-expression-in.html</a>,
                    which details specifically how and why you would use this approach. We find this
                    the least intuitive of the options discussed here, so it isn’t the one we’d
                    choose in Real Life. It’s nonetheless worth knowing how
                    <code class="language-xquery">for</code> expressions work, but because simple
                    map and path expressions have an implicit <q>for</q> built into every step
                    (since the step to the right of the slash or bang is applied once <em>for</em>
                    each item in the sequence to the left), we use explicit
                    <code class="language-xquery">for</code> statements much less in XPath than we
                    do in many other programming languages.</p></li>
        </ol>
        <section class="note">
            <p>In many instances we can apply an operation to a sequence of nodes with either a
                slash or simple mapping. For example, the following two expressions are equivalent,
                and each returns a sequence of integers that gives the string length for each act in
                the play, in document order (that is, from Act 1 through Act 5, consecutively):</p>
            <ul>
                <li><code class="language-xquery">//body/div ! string-length(.)</code></li>
                <li><code class="language-xquery">//body/div/string-length(.)</code></li>
            </ul>
            <p>We recommend using the simple map operator where appropriate, such as in this
                situation, because it makes it easier to see when we are taking a path step and when
                we are applying a function to each member of a sequence.</p>
            <p>There are, though, at least two important differences between the slash and the
                simple map operator in this context:</p>
            <ul>
                <li><p>With both operations the sequence to the left supplies the input items, one
                        by one, for the operation on the right. The slash requires that the sequence
                        to the left be a sequence of nodes, while the simple map operator allows any
                        sequence. For example:</p><ul>
                        <li><p>The expression
                                <code class="language-xquery">distinct-values(//speaker) ! string-length(.)</code>
                                will return the string length (number of letters) for each distinct
                                speaker name.</p></li>
                        <li><p>The expression
                                <code class="language-xquery">distinct-values(//speaker)/string-length(.)</code>
                                will raise an error because distinct values are strings, and not
                                nodes.</p></li>
                    </ul><p>Meanwhile, both
                        <code class="language-xquery">//speaker ! string-length(.)</code> and
                        <code class="language-xquery">//speaker/string-length(.)</code> will work
                        because <code class="language-xquery">//speaker</code>, unlike
                        <code class="language-xquery">distinct-values(//speaker)</code>, is a
                        sequence of nodes.</p>
                </li>
                <li><p>The slash sorts the items on the left into document order and removes
                        duplicates before it passes them along to the operation on the right, which
                        the bang does not do. The following example is a bit contrived (more natural
                        examples occur inside XSLT transformations, but not in stand-alone XPath
                        expressions):</p>
                    <ul>
                        <li><p>The expression</p>
                            <pre><code class="language-xquery">(
  //body/div => 
  sort((),function($i) {string-length($i)})
)
! head</code></pre>
                            <p>sorts the acts from shortest to longest by string-length and returns
                                the act labels. The results are, in order, the
                                <code class="language-xml">&lt;head&gt;</code> children of acts 4,
                                2, 5, 1, 3. That is, Act 4 is the shortest act and Act 3 is the
                                longest with respect to string length.</p>
                            <section class="note">
                                <p>You can read about the
                                    <code class="language-xquery">sort()</code> function at <a
                                        href="https://www.w3.org/TR/xpath-functions-31/#func-sort"
                                        >https://www.w3.org/TR/xpath-functions-31/#func-sort</a>.</p>
                            </section></li>
                        <li><p>If we replace the simple map operator in the XPath expression above
                                with the slash we re-sort the results into document order, so that
                                the results are, in order, acts 1, 2, 3, 4, 5. This is probably not
                                what we want or we wouldn’t have sorted them in the first
                            place.</p></li>
                    </ul></li>
            </ul>
        </section>
    </body>
</html>
