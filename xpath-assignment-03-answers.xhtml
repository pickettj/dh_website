<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
    <!--#set var="title" value="XPath assignment #3 answers" -->
    <!--#config timefmt="%Y-%m-%dT%X%z" -->
    <head>
        <title><!--#echo var="title" --></title>
        <!--#include virtual="inc/dh-header.html" -->
        <style type="text/css">
            section.note {
              margin-top: 1em;
              margin-bottom: 1em;
            }</style>
    </head>
    <body class="line-numbers">
        <!--#include virtual="inc/dh-boilerplate.html" -->
        <p>You can find an XML (TEI) version of Shakespeare’s <cite>Hamlet</cite> at <a
                href="bad-hamlet.xml">http://dh.obdurodon.org/bad-hamlet.xml</a>. We’ve deliberately
            damaged some of the markup in this edition to introduce some inconsistencies, but the
            file is well-formed XML, which means that you can use XPath to explore it. You should
            download this file to your computer (typically that means right-clicking on the link and
            selecting <q>save as</q>) and open it in &lt;oXygen/&gt;.</p>
        <p>After you’ve completed your homework, save your answers to a file and upload it to
            CourseWeb as an attachment. (Please use an attachment! If you paste your answer into the
            text box, CourseWeb may munch the angle brackets.) Some of these tasks are
            thought-provoking, and even difficult. If you get stuck, do the best you can, and if you
            can’t get a working answer, give the answers you tried and explain where they failed to
            get the results you wanted. Sometimes doing that will help you figure out what’s wrong,
            and even when it doesn’t, it will help us identify the difficult moments. These tasks
            require the use of path expressions, predicates, and functions. There may be more than
            one possible answer.</p>
        <p>Notation: For ease in recognition, from now on when we refer in discussion to an
            attribute name, we’ll precede it with an at sign
            (<code class="language-xquery">@</code>). In other words, when we write about <q>the
                <code class="language-xquery">@id</code> attribute</q> in question #2, below, the
            name of the attribute is actually <code class="language-xquery">id</code> (without an at
            sign).</p>
        <p>Using the <cite>Bad Hamlet</cite> document and the XPath browser window in
            &lt;oXygen/&gt;, construct XPath expressions that will do the following (give the full
            XPath expressions in your answers, and not just the results):</p>
        <ol>
            <li><p>What XPath expressions will find the last stage direction
                    <code class="language-xml">&lt;stage&gt;</code> in the entire document? (Note:
                    there should be only one!)</p>
                <p>One possible answer is <code class="language-xquery">(//stage)[last()]</code>.
                    This collects all of the stage directions in the entire document, forms them
                    into one big sequence with parentheses, and then uses the predicate
                    <code class="language-xquery">[last()]</code> to keep only the last item in that
                    sequence.</p>
                <p>Alternatively, you could have used
                    <code class="language-xquery">//stage[not(following::stage)]</code> The last
                    <code class="language-xml">&lt;stage&gt;</code> will not have any others
                    following it. The predicate here makes use of the
                    <code class="language-xquery">following::</code> axis, which searches the rest
                    of the tree following the current context. Note the difference between this axis
                    and the <code class="language-xquery">following-sibling::</code> axis, which
                    would check for following <code class="language-xml">&lt;stage&gt;</code>
                    elements only within the same parent element.</p>
                <section class="note">
                    <p>The <dfn>long axes</dfn> (preceding and following) are less efficient
                        computationally than the others because they don’t take advantage of the
                        tree structure, and tree traversal is more efficient than just walking
                        through the document looking for elements. In a document of this small size
                        you won’t notice a difference, but in a large production system you might
                        want to avoid the long axes if there is an
                        alternative.<!-- (For a real-world
                        example where the efficiency of the long axes was a serious issue, see <a
                            href="http://www.balisage.net/Proceedings/vol3/html/Birnbaum01/BalisageVol3-Birnbaum01.html"
                                ><q>An XML user steps into, and escapes from, XPath
                            quicksand</q></a>.)--></p>
                </section>
                <p>You may have tried <code class="language-xquery">//stage[last()]</code> and been
                    surprised to get 218 answers, which cannot be correct since there cannot be 218
                    last stage directions in the entire play. Meanwhile,
                    <code class="language-xquery">/descendant::stage[last()]</code> correctly
                    returns the single last speeech in the entire play. For an explanation of why
                    these two expressions behave differently, see the <q>What does
                        <code class="language-xquery">//</code> mean?</q> section of the <a
                        href="xpath-assignment-02-answers.xhtml">posted solution to our XPath #2
                        exercise</a> and the discussion in Michael Kay, pp. 542, 618, 702–03.</p>
                <blockquote style="display: none;">
                    <!-- possibly more confusing than helpful, even with a warning that they
                    don't have to understand it -->
                    <p style="font-size: smaller;"><strong>The fine print:</strong> If you’ve had a
                        good night’s sleep, you might want to read up on the exact meaning of
                        <code class="language-xquery">//</code> in Michael Kay at pp. 626–28, as
                        well as the discussion of the difference between predicates in <dfn>filter
                            expressions</dfn> and predicates in <dfn>axis steps</dfn> at 639. We use
                        <code class="language-xquery">//</code> as if it means <q>look anywhere in
                            the document,</q> and it sort of does, but there are complications with
                        numerical predicates. You don’t need to understand these details; you can
                        just remember to use parentheses in situations like <q>find the first or
                            last instance of a particular element in the document.</q></p>
                </blockquote>
            </li>
            <li><p>What XPath expression will find the last member in the cast list at the beginning
                    of the document and select the <code class="language-xquery">@xml:id</code>
                    attribute that is associated with it?</p>
                <p><code class="language-xquery">(//castItem)[last()]/role/@xml:id</code></p>
                <p>After looking at the document, you can see that the basic path you want to follow
                    is to find the last <code class="language-xml">&lt;castItem&gt;</code>, get its
                    <code class="language-xml">&lt;role&gt;</code> child (there can be only one
                    <code class="language-xml">&lt;role&gt;</code> per
                    <code class="language-xml">&lt;castItem&gt;</code>), and then get the
                    <code class="language-xquery">@xml:id</code> of the
                    <code class="language-xml">&lt;role&gt;</code>.</p>
                <p>The path expression <code class="language-xquery">//castItem</code> finds all
                    <code class="language-xml">&lt;castItem></code> elements, but as was the case
                    with the stage directions in the previous question, it effectively returns them
                    in cohorts of siblings, so
                    <code class="language-xquery">//castItem[last()]</code> returns the last
                    <code class="language-xml">&lt;castItem></code> in each cohort, and not the last
                    one in the document. There are three such cohorts: the
                    <code class="language-xml">&lt;castItem></code> children of
                    <code class="language-xml">&lt;castList></code> and the
                    <code class="language-xml">&lt;castItem></code> children of each of the two
                    <code class="language-xml">&lt;castGroup></code> elements (Courtiers,
                    Grave-diggers), which themselves are children
                    of<code class="language-xml"> &lt;castList></code>. Wrapping parentheses around
                    <code class="language-xquery">//castItem</code> at the beginning flattens all of
                    the <code class="language-xml">&lt;castItem></code> elements into a single
                    sequence, so that the predicate returns only one node, which is the one you
                    want.</p>
            </li>
            <li><p>What XPath expression will find all <code class="language-xml">&lt;sp&gt;</code>
                    elements with more than 8 line (<code class="language-xml">&lt;l&gt;</code>)
                    subelements? You’ll need to use the <code class="language-xquery">count()</code>
                    function (Kay 733–34).</p>
                <p><code class="language-xquery">//sp[count(descendant::l) gt 8]</code> or
                    <code class="language-xquery">//sp[count(.//l) gt 8]</code></p>
                <p>This expression finds all <code class="language-xml">&lt;sp&gt;</code> elements
                    in the document and filters them by counting the number of
                    <code class="language-xml">&lt;l&gt;</code> descendants they have and checking
                    whether that count is greater than 8. We used the <code class="language-xquery">gt</code>
                    <dfn>value comparison</dfn> test for <q>greater than</q>; you could also use the <code class="language-xquery">&gt;</code>
                    <dfn>general comparison</dfn> test, and you can spell that either with the raw
                    <code class="language-xquery">&gt;</code> character or the
                    <code class="language-xquery">&amp;gt;</code> character entity replacement. In
                    this context, where there is only one item on either side of the test (the
                    integer count of lines to the left and the integer <q>8</q> to the right) and
                    the two are comparable (we’re comparing a number to a number), there’s no
                    difference between value comparison and general comparison.</p>
                <section class="note">
                    <p>If either side was a sequence of more than one item you would have to use
                        general comparison (value comparison works only with exactly one item on
                        each side), and it may not mean what you think. What would it mean to ask
                        whether the count of lines was greater than the sequence
                        <code class="language-xquery">(8, 10)</code>? That question turns out not to
                        be an error; it has a meaning, which you can look up under <q>general
                            comparison</q> in Michael Kay, and we also discuss it briefly at the end
                        of our <a href="functions.xhtml">XPath functions we use most
                        tutorial</a>.</p>
                </section>
                <p>If you tried <code class="language-xquery">//sp[count(//l) gt 8]</code>, without
                    the leading dot in the predicate, you got every
                    <code class="language-xml">&lt;sp&gt;</code> in the document, all 1137 of them.
                    See the <q>What does <code class="language-xquery">//</code> mean?</q> section
                    our posted solution to <a href="xpath-assignment-02-answers.xhtml">XPath
                        assignment #2</a> for an explanation</p>
                <p>Note that the question asked for <q>subelement</q>, so the answer should look for
                    descendants, and not just children. See bonus question #3, below, for discussion
                    of the difference.</p>
            </li>
            <li><p>Building on your answer to the preceding question, what XPath expression will
                    tell you how many line subelements each of those speeches actually has?</p>
                <p><code class="language-xquery">//sp[count(descendant::l) gt 8] ! count(descendant::l)</code></p>
                <p>The preceding answer returned a sequence of 94
                    <code class="language-xml">&lt;sp&gt;</code> elements. We then use the simple
                    map operator to apply the count function to all of the
                    <code class="language-xml">&lt;l&gt;</code> descendants of each of those
                    speeches.</p>
            </li>
            <li><p>Building on your answers to the preceding two questions, what XPath expression
                    will find the speakers of all speeches that have more than 8 line subelements?
                    Once you’ve found the speeches that have more than 8 lines, you can find the
                    speakers of those speeches by just adding another path step, but you’ll get some
                    duplication, since a single person may have more than one long speech. Your
                    answer to this question should get rid of the duplicates, and return just a list
                    of names of speakers without duplication. You’ll need to use the
                    <code class="language-xquery">distinct-values()</code> function (Kay
                    749–50).</p>
                <p><code class="language-xquery">//sp[count(descendant::l) gt 8]/speaker => distinct-values()</code></p>
                <p>Starting with the answer to #3, instead of counting the desendant lines, as we
                    did in #4, and getting a count of the lines, we add a
                    <code class="language-xquery">speaker</code> path step and get the
                    <code class="language-xml">&lt;speaker&gt;</code> child of each speech. Since
                    there are 94 speeches, we get a sequence of 94 speakers. We get rid of the
                    duplicates by applying the
                    <code class="language-xquery">distinct-values()</code> function to that
                    sequence.</p></li>
        </ol>
        <h3>Optional bonus questions</h3>
        <ol>
            <li><p>Question #1, above, asked how you to provide an XPath that would find the last
                    stage direction (<code class="language-xml">&lt;stage&gt;</code>) in the play.
                    What XPath would find the last line
                    (<code class="language-xml">&lt;l&gt;</code>) in the play? What XPath would find
                    the last stage direction <em>or</em> line (that is, whichever of the last stage
                    direction and last line comes last)? You’ll need to use the <dfn>union
                        operator</dfn> (Kay 628–31).</p>
                <p>You can find the last stage direction or line with
                    <code class="language-xquery">(/descendant::l | /descendant::stage)[last()]</code>.
                    Reading from the inside out, we use
                    <code class="language-xquery">/descendant::l</code> to find all lines in the
                    play and <code class="language-xquery">/descendant::stage</code> to find all
                    stage directions. We join those with the union operator
                    (<code class="language-xquery">|</code>) to create a sequence of all of the
                    nodes returned by both of those paths, that is, all lines and all stage
                    directions. We wrap that union in parentheses to form it into one long sequence
                    and then use the <code class="language-xquery">last()</code> function in a
                    predicate to select the last item in that sequence in document order. Note that
                    the union operator doesn’t concatenate the sequences, which would put all of the
                    lines before all of the stage directions; it maintains document order. You can
                    verify this by changing the order of the line and stage-direction parts of the
                    expression; you’ll get the same result.</p>
                <p>Note that we don’t get the last line and last stage direction separately and then
                    figure out which of those comes after the other. That would work, but it entails
                    an unnecessary extra step and only makes the code harder to understand.</p></li>
            <li><p>Question #2, above, asked you to provide an XPath that would find the
                    <code class="language-xquery">@xml:id</code> associated with the last cast
                    member in the cast list. What’s the difference between an XPath that returns the
                    <code class="language-xquery">@xml:id</code> attribute itself and an XPath that
                    returns just the <em>value</em> of the
                    <code class="language-xquery">@xml:id</code> attribute? That is, what are the
                    two XPath expressions and what object does each of them return? You’ll need to
                    use the <code class="language-xquery">data()</code> or
                    <code class="language-xquery">string()</code> function (Kay 741–43, 877–79).</p>
                <p>When your path ends with something like
                    <code class="language-xquery">@xml:id</code>, what you return is an attribute
                    node. If you were copying that into a new XML document as part of an XSLT
                    transformation, you would create an attribute on whatever element you had just
                    created in the output XML document. If, though, you extend the path as
                    <code class="language-xquery">(//castItem)[last()]/role/@xml:id ! string(.)</code>
                    you’ll get the <em>value</em> of the attribute, instead of the attribute node
                    itself. If you write the value into your output XML, you don’t get an attribute
                    node; you just get the string value.</p>
                <p>In the &lt;oXygen/&gt; XPath debugger interface there isn’t much visual
                    difference between retrieving the attribute node or its string value. But in an
                    XSLT transformation you don’t want to create an attribute in your output
                    document instead of a string value, or vice versa.</p></li>
            <li><p>Question #3, above, asked you to provide an XPath expression that would select
                    all of the speeches (<code class="language-xml">&lt;sp&gt;</code> elements) with
                    more than 8 line (<code class="language-xml">&lt;l&gt;</code>) subelements. What
                    XPath expressions would select speeches with more than 8 line <em>child</em>
                    elements (one XPath expression) and speeches with more than 8
                        <em>descendant</em> line elements (the expression you created for #3,
                    above)? How do those results differ? If there are descendant line elements that
                    are not children of a speech, what is their parent? If you don’t know the types
                    of their parent elements in advance, what XPath expression will tell you?</p>
                <p>The XPath <code class="language-xquery">//sp[count(descendant::l) gt 8]</code>
                    returns the sequence of all <code class="language-xml">&lt;sp&gt;</code>
                    elements that have more than 8 <code class="language-xml">&lt;l&gt;</code>
                    descendants. As we mention in the answer to regular question #3, above, there
                    are 94 of them. To find just the children, but not other descendants, use
                    <code class="language-xquery">//sp[count(l) gt 8]</code>, which returns 87
                    <code class="language-xml">&lt;sp&gt;</code> elements. (You could write
                    <code class="language-xquery">//sp[count(./l) gt 8]</code>, but the dot and
                    slash aren’t needed [= shouldn’t be used] here, since the child axis is the
                    default axis.) Since the task was to find lines that are descendants of speeches
                    but that are not children of those speeches, the most direct route might
                    be<code class="language-xquery">//sp//l[not(parent::sp)]</code>. (As it turns
                    out, you don’t need the <code class="language-xquery">//sp</code> part of this
                    path because all <code class="language-xml">&lt;l></code> elements happen to be
                    descendants of <code class="language-xml">&lt;sp></code> elements, but in Real
                    Life you might not always know that sort of detail). This finds all speeches,
                    and then all of their line descendants, and then uses a predicate to keep only
                    the lines that don’t have a parent of type
                    <code class="language-xml">&lt;sp&gt;</code>.</p>
                <p>You can retrieve the parents themselves (instead of retrieving the lines and just
                    filtering them by their parents) with
                    <code class="language-xquery">//sp//l/..[not(self::sp)]</code>. This is the main
                    reason for the existence of the <code class="language-xquery">self::</code>
                    axis; this XPath can be read as: <q>Find all speeches in the play, and then all
                        of their line descendants, and then the parents of each of those lines, and
                        filter them to keep only the ones where the parent is not of type
                        <code class="language-xml">&lt;sp&gt;</code>.</q> To get the element type
                    (if they aren’t speeches, what are they?), you can use the
                    <code class="language-xquery">name()</code> function:
                    <code class="language-xquery">//sp//l/..[not(self::sp)] ! name(.)</code>, and to
                    remove the duplicates you can use the arrow operator:
                    <code class="language-xquery">//sp//l/..[not(self::sp)] ! name(.) => distinct-values()</code>.
                    The answer is that all lines that are not immediate children of speeches are
                    children of line groups (<code class="language-xml">&lt;lg&gt;</code>).</p>
                <p>You could, alternatively, use
                    <code class="language-xquery">//sp//l[not(parent::sp)]/..</code>, which, instead
                    of finding the parents first and then using the self axis to filter out the ones
                    that of type <code class="languagte-xml">&lt;sp></code>, instead filters on the
                    preceding path step to find only the lines that don’t have
                    <code class="language_xml">&lt;sp></code> parents and then gets their parents.
                    Whether you filter on the line step or the parent step is a matter of personal
                    preference, and we recommend using the expression that corresponds most closely.
                    step by step, to how you would explain what you were trying to your <a
                        href="https://en.wikipedia.org/wiki/Rubber_duck_debugging">rubber
                    duck</a>.</p></li>
        </ol>
    </body>
</html>
