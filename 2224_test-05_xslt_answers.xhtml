<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
    <!--#set var="title" value="Text #5: XSLT answers" -->
    <!--#config timefmt="%Y-%m-%dT%X%z" -->
    <head>
        <title><!--#echo var="title" --></title>
        <!--#include virtual="inc/dh-header.html" -->
    </head>
    <body class="line-numbers">
        <!--#include virtual="inc/dh-boilerplate.html" -->
        <section>
            <h3>The task</h3>
            <p>Your task was to write XSLT that will create a reading view of our <a
                    href="phantom.xml">Phantom of the opera</a> novel in HTML. The <a
                    href="2224_test-05_xslt.xhtml">test instructions</a> provide general guidelines
                along with a list of required and optional tasks.</p>
        </section>
        <section>
            <h3>Basic solution</h3>
            <p>The following XSLT implements all of the required tasks. We explain how the parts
                work with embedded XML comments. (We always comment our stylesheets, but because
                this is the answer to a test question, it includes more commentary than we would
                normally use.) You can read our basic output at <a href="output-basic.xhtml"
                    >http://dh.obdurodon.org/output-basic.xhtml</a>.</p>
            <pre class="language-xml"><code><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:math="http://www.w3.org/2005/xpath-functions/math" xmlns="http://www.w3.org/1999/xhtml"
  exclude-result-prefixes="#all" version="3.0">
  <xsl:output method="xhtml" html-version="5" omit-xml-declaration="no" include-content-type="no"
    indent="yes"/>
  <!-- ================================================================== -->
  <!-- Stylesheet variables                                               -->
  <!--                                                                    -->
  <!-- Save title (as a string, since it contains no markup) in variable  -->
  <!-- since we use it twice                                              -->
  <!-- ================================================================== -->
  <xsl:variable name="title" as="xs:string" select="//metaData/title"/>

  <!-- ================================================================== -->
  <!-- Create HTML superstructure                                         -->
  <!-- ================================================================== -->
  <xsl:template match="/">
    <html>
      <head>
        <title>
          <xsl:value-of select="$title"/>
        </title>
      </head>
      <body>
        <h1>
          <xsl:value-of select="$title"/>
        </h1>
        <hr/>
        <section>
          <h2>Table of contents</h2>
          <ul>
            <xsl:apply-templates select="//desc" mode="toc"/>
          </ul>
          <hr/>
        </section>
        <section>
          <xsl:apply-templates select="//body"/>
        </section>
      </body>
    </html>
  </xsl:template>

  <!-- ================================================================== -->
  <!-- Table of contents mode                                             -->
  <!-- ================================================================== -->
  <xsl:template match="desc" mode="toc">
    <!-- ================================================================ -->
    <!-- <desc> has two types of children, <number> and <title>. We match -->
    <!-- each in its own template, adding a period between them. We       -->
    <!-- match with a mode because we need to process <desc> contents     -->
    <!-- differently in the table of contents (as an <li>) and the main   -->
    <!-- reading view (as <h2> and <h3>; see below)                       -->
    <!-- ================================================================ -->
    <li>
      <xsl:apply-templates select="number"/>
      <xsl:text>. </xsl:text>
      <xsl:apply-templates select="title"/>
    </li>
  </xsl:template>

  <!-- ================================================================== -->
  <!-- Numerals and chapter names at the start of each chapter            -->
  <!-- ================================================================== -->
  <xsl:template match="desc">
    <!-- ================================================================ -->
    <!-- We use HTML header elements hierarchically: <h1> for the single  -->
    <!-- main title, <h2> for the chapter number, and <h3> for the        -->
    <!-- chapter title                                                    -->
    <!-- =============================================================    -->
    <h2>
      <xsl:apply-templates select="number"/>
    </h2>
    <h3>
      <xsl:apply-templates select="title"/>
    </h3>
  </xsl:template>

  <!-- ================================================================== -->
  <!-- Body                                                               -->
  <!-- ================================================================== -->
  <xsl:template match="p">
    <!-- ================================================================ -->
    <!-- Input paragraph are transformed in HTML output paragraphs to     -->
    <!-- avoid the dreaded Wall Of Text                                   -->
    <!-- ================================================================ -->
    <p>
      <xsl:apply-templates/>
    </p>
  </xsl:template>

  <!-- ================================================================== -->
  <!-- Notes                                                              -->
  <!-- ================================================================== -->
  <xsl:template match="note">
    <!-- ================================================================ -->
    <!-- <note> elements are all children of <p>. We render them in line  -->
    <!-- with square brackets around them and a label that distinguishes  -->
    <!-- author's and translator's notes. Alternative renderings are fine -->
    <!-- as long as they clearly distinguish notes from body paragraph    -->
    <!-- text                                                             -->
    <!-- ================================================================ -->
    <xsl:text>[Note (</xsl:text>
    <xsl:value-of select="@resp"/>
    <xsl:text>): </xsl:text>
    <xsl:apply-templates/>
    <xsl:text>]</xsl:text>
  </xsl:template>
</xsl:stylesheet>
]]></code></pre>
        </section>
        <section>
            <h3>Solution with bonus tasks</h3>
            <p>The following enhanced solution implements the bonus tasks. You can read our the
                output of this bonus implementation at <a href="output-bonus.xhtml"
                    >http://dh.obdurodon.org/output-bonus.xhtml</a>.</p>
            <pre class="language-xml"><code><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:math="http://www.w3.org/2005/xpath-functions/math" xmlns="http://www.w3.org/1999/xhtml"
  exclude-result-prefixes="#all" version="3.0">
  <xsl:output method="xhtml" html-version="5" omit-xml-declaration="no" include-content-type="no"
    indent="yes"/>
  <!-- ================================================================== -->
  <!-- Stylesheet variables                                               -->
  <!--                                                                    -->
  <!-- Save title (as a string, since it contains no markup) in variable  -->
  <!-- since we use it twice                                              -->
  <!-- ================================================================== -->
  <xsl:variable name="title" as="xs:string" select="//metaData/title"/>

  <!-- ================================================================== -->
  <!-- Create HTML superstructure                                         -->
  <!-- ================================================================== -->
  <xsl:template match="/">
    <html>
      <head>
        <title>
          <xsl:value-of select="$title"/>
        </title>
        <!-- ============================================================ -->
        <!-- Link To stylesheet                                           -->
        <!-- ============================================================ -->
        <link rel="stylesheet" type="text/css" href="phantom.css"/>
      </head>
      <body>
        <h1>
          <xsl:value-of select="$title"/>
        </h1>
        <hr/>
        <section>
          <h2>Table of contents</h2>
          <ul>
            <xsl:apply-templates select="//desc" mode="toc"/>
          </ul>
          <hr/>
        </section>
        <section>
          <xsl:apply-templates select="//body"/>
        </section>
        <section>
          <!-- ========================================================== -->
          <!-- Create heading and generate footnotes at the end of the    -->
          <!-- document in a single ordered list, where the number in the -->
          <!-- list corresponds to the footnote number.                   -->
          <!-- =========================================================- -->
          <hr/>
          <h2>Notes</h2>
          <ol>
            <xsl:apply-templates select="//note" mode="foot"/>
          </ol>
        </section>
      </body>
    </html>
  </xsl:template>

  <!-- ================================================================== -->
  <!-- Table of contents mode                                             -->
  <!-- ================================================================== -->
  <xsl:template match="desc" mode="toc">
    <!-- ================================================================ -->
    <!-- <desc> has two types of children, <number> and <title>. We match -->
    <!-- each in its own template, adding a period between them. We       -->
    <!-- match with a mode because we need to process <desc> contents     -->
    <!-- differently in the table of contents (as an <li>) and the main   -->
    <!-- reading view (as <h2> and <h3>; see below)                       -->
    <!--                                                                  -->
    <!-- Unlike with XSLT #5, there are no convenient attributes to use   -->
    <!-- to create an @href and @id values for the links, so we use the   -->
    <!-- XPath generate-id() function. Alternatively, you could create    -->
    <!-- your unique values explicitly with something like:               -->
    <!--                                                                  -->
    <!--   <a href="note{count(preceding::note) + 1}">                    -->
    <!-- ===============================================================  -->
    <li>
      <a href="#{generate-id()}">
        <xsl:apply-templates select="number"/>
        <xsl:text>. </xsl:text>
        <xsl:apply-templates select="title"/>
      </a>
    </li>
  </xsl:template>

  <!-- ================================================================== -->
  <!-- Numerals and chapter names at the start of each chapter            -->
  <!-- ================================================================== -->
  <xsl:template match="desc">
    <!-- ================================================================ -->
    <!-- We use HTML header elements hierarchically: <h1> for the single  -->
    <!-- main title, <h2> for the chapter number, and <h3> for the        -->
    <!-- chapter title. We put the @id on the <section> so that the link  -->
    <!-- will point to the chapter as a whole                             -->
    <!-- =============================================================    -->
    <section id="{generate-id()}">
      <h2 class="number">
        <xsl:apply-templates select="number"/>
      </h2>
      <h3 class="title">
        <xsl:apply-templates select="title"/>
      </h3>
    </section>
  </xsl:template>

  <!-- ================================================================== -->
  <!-- Body                                                               -->
  <!-- ================================================================== -->
  <xsl:template match="p">
    <!-- ================================================================ -->
    <!-- Input paragraphs are transformed in HTML output paragraphs to    -->
    <!-- avoid the dreaded Wall Of Text                                   -->
    <!-- ================================================================ -->
    <p>
      <xsl:apply-templates/>
    </p>
  </xsl:template>

  <!-- ================================================================== -->
  <!-- Notes inside reading view                                          -->
  <!-- ================================================================== -->
  <xsl:template match="note">
    <!-- ================================================================ -->
    <!-- Since we’ve decided to render all notes together in one list at  -->
    <!-- end of the document we need to number them continuously. There   -->
    <!-- several ways to do that, and the option we chose was to use      -->
    <!-- <xsl:number>; setting the value of the @level attribute to "any" -->
    <!-- creates a single continuous list of all note numbers in the      -->
    <!-- entire document. We wrap the value in an HTML <sup> element,     -->
    <!-- which creates a traditional superscript footnote number. The     -->
    <!-- notes themselves are then generated as a numbered list at the    -->
    <!-- bottom in a "foot" mode.                                         -->
    <!--                                                                  -->
    <!-- We use generate-id() to create the links although, as with the   -->
    <!-- table-of-contents links above, we could instead have crafted our -->
    <!-- own @href and @id values.                                        -->
    <!-- ================================================================ -->
    <sup>
      <a href="#{generate-id()}">
        <xsl:number level="any"/>
      </a>
    </sup>
  </xsl:template>

  <!-- ================================================================== -->
  <!-- Note mode                                                          -->
  <!-- We don't create our own note numbers here because they are in an   -->
  <!-- HTML <ol>, which does the sequential numbering for us              -->
  <!-- ================================================================== -->
  <xsl:template match="note" mode="foot">
    <li id="{generate-id()}">
      <xsl:apply-templates/>
    </li>
  </xsl:template>
</xsl:stylesheet>]]></code></pre>
            <p></p>
        </section>
        <section>
            <h3>Bonus CSS</h3>
            <p>The CSS to which we link for the bonus solution is:</p>
            <pre class="language-css"><code><![CDATA[body {
  background-color: #f5e4c4;
  font-family: "Lucida Console", "Courier New", monospace;
}
h1 {
  font-family: Cursive, "Lucida Handwriting";
  ;
}

.number {
  text-decoration: underline;
}

.title {
  font-style: italic;
}

a:active {
  /* Orange background while mouse button is depressed */
  background-color: #ff5724;
}

a {
  /* Brown */
  color: #6b1f0e;
}

li:target {
  /* Endnote target highlighted in pink */
  background-color: #ffcedf;
}]]></code></pre>
            <p>Just linking to a note at the end, without our rule for
                <code class="language-css">li:target</code>, does scroll to the note, as expected,
                but because the notes are short and grouped together at the end of the document the
                target click cannot scroll all the way to top of the page, which means that we can’t
                see immediately which note we requested. The CSS
                <code class="language-css">:target</code> pseudo-class applies styling to the target
                of a link, which makes the specific note we asked for stand out among the others.
                For discussion see <a
                    href="https://developer.mozilla.org/en-US/docs/Web/CSS/:target">:target</a>.</p>
        </section>
    </body>
</html>
