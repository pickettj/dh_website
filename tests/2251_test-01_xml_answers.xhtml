<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
    <!--#set var="title" value="Test #1: XML: Answer key" -->
    <!--#config timefmt="%Y-%m-%dT%X%z" -->
    <head>
        <title>Answer Key: XML Test</title>
        <link rel="stylesheet" type="text/css" href="../css/style_key.css"/>
        <link href="https://fonts.googleapis.com/css?family=Assistant" rel="stylesheet"/>
    </head>
    <body class="line-numbers">
        <!--#include virtual="inc/dh-boilerplate.html" -->
        <section>
            <h2>Answer Key: XML Test</h2>
            <h3>Instructions</h3>
            <p>Answer the following questions and upload your answers to Canvas. All tests in this
                course are open book, so you can look things up and you can try out your code in
                &lt;oXygen/&gt;, but you cannot receive help from another person.</p>
            <p> Create your answers in &lt;oXygen/> as a plain-text document, which you can do by
                creating a new document (using the File → New menu options) and typing <q>text</q>
                into the <q>Type filter text</q> box. Do not use a word processor (like Microsoft
                Word) because word processors do things like changing your straight quotation marks
                to curly ones, which you don’t want. The file you upload must follow our <a
                    href="file-naming_conventions.xhtml">file-naming conventions</a>, using
                    <i>.txt</i> as the filename extension (to indicate that you are submitting a
                plain-text file).</p>
        </section>
        <section>
            <h3>Questions</h3>
            <ol>
                <li><p><strong>Question:</strong>The following is an example of an XML document.
                        What is the name of the root element of this example?</p>
                    <pre class="language-xml"><code><![CDATA[<ingredients>
  <ingredient>sugar</ingredient>
  <ingredient>butter</ingredient>
  <ingredient>flour</ingredient>
  <ingredient>chocolate chips</ingredient>
</ingredients>]]></code></pre>
                    <p><strong>Answer:</strong> The root element, or the element that encloses all
                        other elements in the document, is
                        <code class="language-xml">&lt;ingredients&gt;</code>. A well-formed
                        document must have exactly one root element.</p>
                </li>
                <li><p><strong>Question:</strong> What is the difference between <dfn>descriptive
                            markup</dfn> and <dfn>presentational markup</dfn>? Give an example of
                        each type and explain 1) why the descriptive markup is descriptive, 2) why
                        the presentational markup is presentational, and 3) why we recommend using
                        descriptive markup in digital humanities projects.</p>
                    <p><strong>Answer:</strong></p>
                    <ol style="list-style-type: lower-alpha;">
                        <li><p><dfn>Descriptive</dfn> markup focuses on the <em>role and
                                    meaning</em> of an element in its context, while
                                    <dfn>presentational</dfn> markup focuses on the <em>rendered
                                    appearance</em> of an element.</p></li>
                        <li><p>A piece of italicized text might be used in a text to represent the
                                thoughts of a character, and <em>descriptive</em> markup might tag
                                that piece as <code class="language-xml">&lt;thought&gt;</code> to
                                represent its meaning to the story. Meanwhile, presentational markup
                                might simply tag that piece as
                                <code class="language-xml">&lt;italic&gt;</code>.</p></li>
                        <li><p>We prioritize descriptive markup in digital humanities work because
                                there are more types of meaning in the world than types of
                                appearance, which means a computer can derive the appearance from
                                the meaning more reliably than if it has to to derive the meaning
                                from the appearance.</p></li>
                    </ol>
                </li>

                <!-- Question assessing well-formedness. An alternative version of the question could contain no red-herring answers, and only ask about how
                a given error-causing scenario could be fixed. More or fewer examples could be used to modulate the time this question takes.-->
                <li><p><strong>Question:</strong> Which of the following scenarios would cause a
                        well-formedness error (red square) in an XML document? (Some may be poor
                        style because they’re confusing, while still being well-formed, and the task
                        is to identify only the ones that are not well-formed.) For each example
                        that is not well-formed, explain why they are not well-formed and how you
                        might fix them.</p>
                    <p><strong>Answers listed under each scenario</strong></p>
                    <ol style="list-style-type: upper-alpha;">
                        <li><p>An element in the document does not contain any content, e.g.:</p>
                            <pre class="language-xml"><code>&lt;bookmark&gt;&lt;/bookmark&gt;</code></pre>
                            <p><strong>Answer:</strong> Empty elements are allowed in XML, so this
                                does not raise a well-formedness error.</p>
                        </li>
                        <li><p>A speech is tagged as having two speakers, e.g.:</p>
                            <pre class="language-xml"><code>&lt;speech speaker="homer" speaker="bart"&gt;Doh!&lt;/speech&gt;</code>.</pre>
                            <p><strong>Answer:</strong> An element can only have one attribute with
                                a given name, so having two attributes called
                                <code class="language-xquery">speaker</code> is a well-formedness
                                violation. The most robust way to fix this is to combine the speaker
                                names under a single attribute, e.g.,
                                <code class="language-xml"><![CDATA[<speech speaker="homer bart">]]></code>.</p>
                            <p>Some of you may have tried
                                <code class="language-xml"><![CDATA[<speech speaker1="homer" speaker2="bart">]]></code>.
                                This is well formed and it received full credit on this test, but
                                for reasons we’ll explore later, it is not as useful an approach as
                                the one we suggest above.</p>
                            <p>Duplicating the tag and its content to create two separate
                                <code class="language-xml">&lt;speech&gt;</code> tags (i.e.,
                                <code class="language-xml">
                                    <![CDATA[<speech speaker="homer">Doh!</speech> <speech speaker="bart">Doh!</speech>]]></code>)
                                will produce a well-formed document, but isn’t informationally
                                correct because it creates two speeches where only one existed in
                                the source document. In this example, it would make it appear as
                                though each character independently said <q>D’oh</q>, one after the
                                other, rather than saying it in unison, which is what the original
                                version tries to express. If you want to use two separate elements,
                                there are strategies for representing the simultaneity with
                                attributes (along the lines described in the answer to 3H,
                                below).</p>
                            <p>Removing one of the speaker attributes/values would create a
                                well-formed document, but that’s not a useful strategy because it
                                loses information. If, for example, you were to delete
                                <code class="language-xquery">
                                    <![CDATA[speaker="homer"]]></code>
                                you would get a green square at the expense of not knowing, when you
                                perform analysis later, that Homer spoke here.</p>
                        </li>
                        <li><p>A comment occurs inside an element, e.g.:</p>
                            <pre class="language-xml"><code><![CDATA[<speech speaker="Horatio">
    <!-- to Hamlet -->
    <line>As I do live, my honoured lord, 'tis true;</line>
    <line>And we did think it writ down in our duty</line>
    <line>To let you know of it.</line>
</speech>]]></code></pre>
                            <p><strong>Answer:</strong> Comments can go nearly anywhere in an XML
                                document, including inside elements. This would not raise a
                                well-formedness error.</p>
                        </li>
                        <li><p>An attribute <em>name</em> (in this case,
                                <code class="language-xquery">main speaker</code>) contains a space
                                character, e.g.:</p>
                            <pre class="language-xml"><code><![CDATA[<speech main speaker="Gertrude">
    <line>If it be,</line>
    <line>Why seems it so particular with thee?</line>
</speech>]]></code></pre>
                            <p><strong>Answer:</strong> An attribute name cannot contain a space,
                                since a space would cause &lt;oXygen/&gt; to see the two words as
                                separate attribute names (in this case
                                <code class="language-xquery">main</code>, with no attribute value,
                                which is itself a well-formedness error, and
                                <code class="language-xquery">speaker</code>). This could be fixed
                                by combining the two-word name in several ways, such as <dfn>snake
                                    case</dfn> (e.g.,
                                <code class="language-xquery">main_speaker</code>), <dfn>kebab
                                    case</dfn> (e.g.,
                                <code class="language-xquery">main-speaker</code>), and <dfn>camel
                                    case</dfn> (e.g.,
                                <code class="language-xquery">mainSpeaker</code>).</p>
                        </li>
                        <li><p>An attribute <em>value</em> contains a space character, e.g.:</p>
                            <pre class="language-xml"><code><![CDATA[<speech speaker="Hamlet’s mother">
    <line>If it be,</line>
    <line>Why seems it so particular with thee?</line>
</speech>]]></code></pre>
                            <p><strong>Answer:</strong> An attribute value can contain a space,
                                since the content of the value is a literal string, and not the name
                                of an XML element or attribute. This will not raise a
                                well-formedness error.</p>
                        </li>
                        <li><p>Paired start- and end-tags differ in capitalization:</p>
                            <pre class="language-xml"><code><![CDATA[<speech speaker="Gertrude">
    <Line>If it be,</line>
    <Line>Why seems it so particular with thee?</line>
</speech>]]></code></pre>
                            <p><strong>Answer:</strong> Start- and end-tags must be exactly the
                                same, including capitalization, because XML is case-sensitive, so an
                                element called <code class="language-xml">&lt;line&gt;</code> is a
                                completely different type of element than one called
                                <code class="language-xml">&lt;Line&gt;</code>. This error can be
                                fixed by making the start- and end-tags agree exactly in the
                                spelling of the element name, e.g.,
                                <code class="language-xml"><![CDATA[<line> … </line>]]></code>.</p>
                            <p>Most XML taggers prefer lower-case element names, so although
                                <code class="language-xml"><![CDATA[<Line> … </Line>]]></code> is
                                also well-formed (and receives full credit on this test), we
                                recommend standardizing on the lower-case spelling instead.</p>
                        </li>
                        <li><p>A complete document lacks a single root node, e.g.:</p>
                            <pre class="language-xml"><code><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<stooge>Curly</stooge>
<stooge>Larry</stooge>
<stooge>Moe</stooge>]]></code></pre>
                            <p><strong>Answer:</strong> All XML documents must have a root element
                                that contains all other elements. This well-formedness error can be
                                fixed by wrapping everything but the XML declaration (which is not
                                document content and which is allowed only as the absolute first
                                line of the file) in a root element (in this case something like
                                <code class="language-xml">&lt;stooges&gt;</code>).</p>
                        </li>
                        <li><p>An element contains a less-than sign:</p>
                            <pre class="language-xml"><code><![CDATA[<equation>1 < 2</equation>]]></code></pre>
                            <p><strong>Answer:</strong> Since a less-than sign
                                (<code class="language-xml">&lt;</code>) is the symbol used for
                                opening a tag, &lt;oXygen/&gt; thinks that it must be followed
                                immediately by an element name, optional attribute information, and
                                then by a greater-than sign. Since the character immediately after
                                the less-than sign in this example is a space and element names
                                cannot contain space characters, and also because there is no
                                following greater-than sign, this raises a well-formedness
                                error.</p>
                            <p>You can fix this by replacing the <dfn>reserved character</dfn> with
                                an appropriate <dfn>character entity</dfn>, which an XML processor
                                will understand correctly as representing a literal character that
                                could not be entered directly because it has a special meaning. The
                                character entity that represents
                                <code class="language-xml">&lt;</code> is
                                <code class="language-xquery">&amp;lt;</code> (the <q>lt</q> is a
                                mnemonic for <q>less than</q>). See the <q>Entities and numerical
                                    character references</q> section of our XML tutorial for
                                discussion and examples.</p>
                            <p>Alternatively, you could replace the &lt; symbol with its
                                corresponding <dfn>numerical charaacter reference</dfn> (or NCR) in
                                Unicode; this works much like the character entities mentioned
                                above, but with a Unicode value in place of the mnemonic. The NCR
                                for &lt; is <code class="language-xquery">&amp;#60;</code> (decimal)
                                or <code class="language-xquery">&amp;#x3c;</code> (hex). We prefer
                                the character entity because it is easier for a human to recognize
                                and understand.</p>
                        </li>
                        <li><p>An element contains a greater-than sign:</p>
                            <pre class="language-xml"><code><![CDATA[<equation>2 > 1</equation>]]></code></pre>
                            <p><strong>Answer:</strong> This will not raise a well-formedness error
                                because although the greater-than sign represents the end of a tag,
                                it has that special markup meaning only if it has been preceded by a
                                less-than sign. Since that isn’t the case here, an XML processor,
                                such as &lt;oXygen/&gt;, understands that it has a literal meaning
                                and does not raise an error.</p>
                            <p>There is a character entity for the greater-than sign, which is
                                spelled <code class="language-xquery">&amp;gt;</code>, and it is not
                                incorrect to use it, although we struggle to think of a situation
                                where it is required to avoid having a greater-than sign mistaken
                                for a tag end-delimiter.</p>
                        </li>

                        <li><p>An element (in this case
                                <code class="language-xml">&lt;quote&gt;</code>) starts in one
                                context and ends in another (in this case, two different
                                <code class="language-xml">&lt;line&gt;</code> elements), e.g.:</p>
                            <pre class="language-xml"><code><![CDATA[<stanza>
    <line>And all should cry, <quote>Beware! Beware!</line>
    <line>His flashing eyes, his floating hair!</line>
    <line>Weave a circle round him thrice,</line>
    <line>And close your eyes with holy dread,</line>
    <line>For he on honey-dew hath fed</line>
    <line>And drunk the milk of Paradise.</quote></line>
</stanza>]]></code></pre>
                            <p><strong>Answer:</strong> Elements must start and end in the same
                                context (that is, inside the same parent element). There are a few
                                ways to resolve this error, each of which involves compromises, and
                                the simplest may be to tag separately each of the quote pieces
                                inside each <code class="language-xml">&lt;line&gt;</code> element.
                                This isn’t fully satisfactory by itself because the lines do not
                                actually contain separate quotes (for example, this strategy
                                wouldn’t let us count quotes in the text by counting
                                <code class="language-xml">&lt;quote&gt;</code> elements), and you
                                can adjust for that by adding an attribute that shows which
                                <code class="language-xml">&lt;quote></code> elements go together.
                                For example, if you tag all parts of the same quote as
                                <code class="language-xml">&lt;quote group="a"></code>, XML
                                processing can use the shared attribute value <q>a</q> to know that
                                these constitute a single textual quote. We’ll introduce other
                                methods later in the course.</p>
                            <p>Just putting the <code class="language-xml">&lt;quote&gt;</code> tags
                                around the last two words of the first line gets a green square, but
                                it isn’t an adequate remedy because it changes the meaning of the
                                document by failing to say that the following lines are also quoted
                                text.</p>
                            <p>The markup languages community refers to the issues involved in this
                                example as <dfn>overlap</dfn> and <dfn>discontinuity</dfn>. The
                                overlap involves quotes and lines that overlap one another, and the
                                discontinuity involves tagging the quote components separately even
                                though they are really parts of a single quote. XML was designed to
                                represent hierarchy well, and it does, but that benefit comes at the
                                expense of not being able to represent overlap or discontinuity in a
                                way that feels natural to humans.</p>
                            <p>We might think that if XML didn’t prohibit overlap the problem would
                                go away, but the issue is that the prohibition against overlap is
                                there for a reason: that’s what enables a computer to recognize XML
                                as a hierarchy. Computers can navigate and process hierarchies more
                                easily than overlapping or discontinuous structures, and, for better
                                or for worse, the designers of XML decided to commit to hierarchy
                                and accept the inconveniences that come with that commitment.</p>
                        </li>
                    </ol>
                </li>
            </ol>
        </section>
    </body>
</html>
