<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
    <!--#set var="title" value="Test #6: SVG
        " -->
    <!--#config timefmt="%Y-%m-%dT%X%z" -->
    <head>
        <title><!--#echo var="title" --></title>
        <!--#include virtual="inc/dh-header.html" -->
    </head>
    <body class="line-numbers">
        <!--#include virtual="inc/dh-boilerplate.html" -->
        <section>
            <h3>The task</h3>
            <p>We asked you to produce an SVG visualization using data from the Federalist Papers.
                The test instructions explain our expectations, including required components of the
                graph and some optional bonus tasks.</p>
        </section>
        <section>
            <h3>Basic solution</h3>
            <p>The XSLT below produces output that meets our requirements and demonstrates proper
                use of variables, comments, and XSLT Best Practice. Your code doesnâ€™t have to look
                exactly like ours, so treat this solution as a guideline for how to approach the
                task.</p>
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="-100, -450, 460, 500" width="600">
                <line x1="0" x2="360" y1="-0" y2="-0" stroke="black" stroke-dasharray="3"/>
                <text x="-5" y="-0" dominant-baseline="middle" text-anchor="end" font-size="10"
                    >0</text>
                <line x1="0" x2="360" y1="-100" y2="-100" stroke="black" stroke-dasharray="3"/>
                <text x="-5" y="-100" dominant-baseline="middle" text-anchor="end" font-size="10"
                    >10</text>
                <line x1="0" x2="360" y1="-200" y2="-200" stroke="black" stroke-dasharray="3"/>
                <text x="-5" y="-200" dominant-baseline="middle" text-anchor="end" font-size="10"
                    >20</text>
                <line x1="0" x2="360" y1="-300" y2="-300" stroke="black" stroke-dasharray="3"/>
                <text x="-5" y="-300" dominant-baseline="middle" text-anchor="end" font-size="10"
                    >30</text>
                <line x1="0" x2="360" y1="-400" y2="-400" stroke="black" stroke-dasharray="3"/>
                <text x="-5" y="-400" dominant-baseline="middle" text-anchor="end" font-size="10"
                    >40</text>
                <rect x="10" y="-290" width="20" height="290" fill="blue"/>
                <text x="20" y="10" text-anchor="middle" font-size="10">9</text>
                <rect x="40" y="-250" width="20" height="250" fill="blue"/>
                <text x="50" y="10" text-anchor="middle" font-size="10">11</text>
                <rect x="70" y="-140" width="20" height="140" fill="blue"/>
                <text x="80" y="10" text-anchor="middle" font-size="10">12</text>
                <rect x="100" y="-100" width="20" height="100" fill="blue"/>
                <text x="110" y="10" text-anchor="middle" font-size="10">13</text>
                <rect x="130" y="-330" width="20" height="330" fill="blue"/>
                <text x="140" y="10" text-anchor="middle" font-size="10">15</text>
                <rect x="160" y="-70" width="20" height="70" fill="blue"/>
                <text x="170" y="10" text-anchor="middle" font-size="10">24</text>
                <rect x="190" y="-20" width="20" height="20" fill="blue"/>
                <text x="200" y="10" text-anchor="middle" font-size="10">32</text>
                <rect x="220" y="-70" width="20" height="70" fill="blue"/>
                <text x="230" y="10" text-anchor="middle" font-size="10">80</text>
                <rect x="250" y="-20" width="20" height="20" fill="blue"/>
                <text x="260" y="10" text-anchor="middle" font-size="10">81</text>
                <rect x="280" y="-10" width="20" height="10" fill="blue"/>
                <text x="290" y="10" text-anchor="middle" font-size="10">83</text>
                <rect x="310" y="-20" width="20" height="20" fill="blue"/>
                <text x="320" y="10" text-anchor="middle" font-size="10">84</text>
                <rect x="340" y="-290" width="20" height="290" fill="blue"/>
                <text x="350" y="10" text-anchor="middle" font-size="10">85</text>
                <line x1="0" x2="360" y1="0" y2="0" stroke="black" stroke-linecap="square"/>
                <line x1="0" x2="0" y1="0" y2="-400" stroke="black" stroke-linecap="square"/>
                <text x="180" y="25" text-anchor="middle">Paper number</text>
                <text x="180" y="-425" text-anchor="middle">Prevalence of federalism by paper</text>
                <text x="-40" y="-200" text-anchor="middle" writing-mode="tb">Instances of
                    federalism</text>
            </svg>
            <pre class="language-xml"><code><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:math="http://www.w3.org/2005/xpath-functions/math" xmlns="http://www.w3.org/2000/svg"
    exclude-result-prefixes="xs math" version="3.0">
    <xsl:output omit-xml-declaration="no" include-content-type="no" indent="yes"/>
    <!-- ================================================================ -->
    <!-- Stylesheet variables                                             -->
    <!-- ================================================================ -->
    <xsl:variable name="barWidth" as="xs:integer" select="20"/>
    <xsl:variable name="interbarSpacing" as="xs:double" select="$barWidth div 2"/>
    <xsl:variable name="maxWidth" as="xs:double"
        select="count(//paper) * ($barWidth + $interbarSpacing)"/>
    <xsl:variable name="maxHeight" as="xs:double" select="40"/>
    <xsl:variable name="yScale" as="xs:double" select="10"/>
    <!-- ================================================================ -->
    <!-- Templates                                                        -->
    <!-- ================================================================ -->
    <xsl:template match="/">
        <svg
            viewBox="-100, -{($maxHeight * $yScale) + 50}, {$maxWidth + 100}, {($maxHeight * $yScale) + 100}">
            <!-- ======================================================== -->
            <!-- Ruling lines                                             -->
            <!-- ======================================================== -->
            <xsl:for-each select="0 to 4">
                <line x1="0" x2="{$maxWidth}" y1="-{. * .25 * $maxHeight * $yScale}"
                    y2="-{. * .25 * $maxHeight * $yScale}" stroke="black" stroke-dasharray="3"/>
                <text x="-5" y="-{. * .25 * $maxHeight * $yScale}" dominant-baseline="middle"
                    text-anchor="end" font-size="10">
                    <xsl:value-of select=". * $yScale"/>
                </text>
            </xsl:for-each>
            <!-- ======================================================== -->
            <!-- Papers                                                   -->
            <!-- ======================================================== -->
            <xsl:apply-templates select="//paper"/>
            <!-- ======================================================== -->
            <!-- Axes                                                     -->
            <!-- ======================================================== -->
            <line x1="0" x2="{$maxWidth}" y1="0" y2="0" stroke="black" stroke-linecap="square"/>
            <line x1="0" x2="0" y1="0" y2="-{$maxHeight * $yScale}" stroke="black"
                stroke-linecap="square"/>
            <!-- ======================================================== -->
            <!-- Axis and graph labels                                    -->
            <!-- ======================================================== -->
            <text x="{$maxWidth div 2}" y="25" text-anchor="middle">Paper number</text>
            <text x="{$maxWidth div 2}" y="-{($maxHeight * $yScale) + 25}" text-anchor="middle"
                >Prevalence of federalism by paper</text>
            <text x="-40" y="-{($maxHeight * $yScale) div 2}" text-anchor="middle" writing-mode="tb"
                >Instances of federalism</text>
        </svg>
    </xsl:template>
    <xsl:template match="paper">
        <!-- ============================================================ -->
        <!-- Template variables for positioning                           -->
        <!-- ============================================================ -->
        <xsl:variable name="xPos" as="xs:double"
            select="(position() - 1) * ($barWidth + $interbarSpacing) + $interbarSpacing"/>
        <xsl:variable name="yPos" as="xs:double"
            select="descendant::federalism => count() * $yScale"/>
        <!-- ============================================================ -->
        <!-- Bar and bar label                                            -->
        <!-- ============================================================ -->
        <rect x="{$xPos}" y="-{$yPos}" width="{$barWidth}" height="{$yPos}" fill="blue"/>
        <text x="{$xPos + $interbarSpacing}" y="10" text-anchor="middle" font-size="10">
            <xsl:value-of select="@no"/>
        </text>
    </xsl:template>
</xsl:stylesheet>]]></code></pre>
        </section>
        <section>
            <h3>Using the <code class="language-xquery">descendant::</code> axis</h3>
            <p><code class="language-xml">&lt;federalism&gt;</code> is a descendant of
                <code class="language-xml">&lt;paper&gt;</code>, so inside the template that matches
                papers, we have to navigate along the descendant axis to find and count
                <code class="language-xml">&lt;federalism&gt;</code>. You may have noticed that if
                you tried to use simply
                <code class="language-xquery">//federalism => count()</code>, you found all the
                <code class="language-xml">&lt;federalism&gt;</code> elements in the entire
                document, rather than just those inside the paper being processed. Thatâ€™s because
                <code class="language-xquery">//</code> says <q>start from the document node and
                    find all instances of <code class="language-xml">&lt;federalism&gt;</code> on
                    its descendant axis</q>. To circumvent this issue, we usually write out
                <code class="language-xquery">descendant::</code>, which looks along the descendant
                axis of the <em>current context</em>.</p>
        </section>
        <section>
            <h3>Scaling the Y axis</h3>
            <p>Because the highest count of <code class="language-xml">&lt;federalism&gt;</code> in
                any single paper was 33 (a value we found by doing some exploratory document
                anaylsis with XPath), we set the maximum value of the Y axis to 40. We prefer to
                work with nice, even values in SVG, because human viewers think best in multiples of
                10. We created a variable called <code class="language-xquery">$maxHeight</code> and
                gave it a value of 40, but a graph with a maximum height of 40px is pretty small. To
                scale the graph and make it look larger, we used a
                <code class="language-xquery">$yScale</code> variable. Its value is 10, and we
                multiplied it by <code class="language-xquery">$maxHeight</code> when setting the
                length of our Y axis. We could have set
                <code class="language-xquery">$maxHeight</code> to a value of 400 in the first
                place, and itâ€™s perfectly fine to take that approach. We like having a
                <code class="language-xquery">$yScale</code> variable, though, because it allows us
                to keep track of the scale of the graph and ensure that the bar heights are
                appropriately proportionate to the Y axis. When calculating the heights of the bars,
                we found the raw count of <code class="language-xml">&lt;federalism&gt;</code>, then
                multiplied it by our <code class="language-xquery">$yScale</code>. If every Y value
                is scaled by the same amount, we know that our graph is proportionate: 400px on the
                graph represents 40 <code class="language-xml">&lt;federalism&gt;</code> elements,
                290px represents 29 <code class="language-xml">&lt;federalism&gt;</code> elements,
                etc. If we wanted to adjust the height of the entire graph, we would then only have
                to change the <code class="language-xquery">$yScale</code> value, and everything
                else adjusts accordingly.</p>
        </section>
        <section>
            <h3>Bonus solution</h3>
            <p>Below is a possible solution to the optional bonus tasks, which asked you to:</p>
            <ul>
                <li><p>Find the number of characters in
                        <code class="language-xml">&lt;federalism&gt;</code> elements using
                        <code class="language-xquery">string-length()</code>.</p></li>
                <li><p>Arrange the graph so that the tallest bar appears first, then the next
                        tallest bar, etc.</p></li>
                <li><p>Add some styling!</p></li>
            </ul>
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="-100, -550, 460, 600" width="600">
                <line x1="0" x2="360" y1="-0" y2="-0" stroke="black" stroke-dasharray="3"/>
                <text x="-5" y="-0" dominant-baseline="middle" text-anchor="end" font-size="10"
                    >0</text>
                <line x1="0" x2="360" y1="-100" y2="-100" stroke="black" stroke-dasharray="3"/>
                <text x="-5" y="-100" dominant-baseline="middle" text-anchor="end" font-size="10"
                    >2000</text>
                <line x1="0" x2="360" y1="-200" y2="-200" stroke="black" stroke-dasharray="3"/>
                <text x="-5" y="-200" dominant-baseline="middle" text-anchor="end" font-size="10"
                    >4000</text>
                <line x1="0" x2="360" y1="-300" y2="-300" stroke="black" stroke-dasharray="3"/>
                <text x="-5" y="-300" dominant-baseline="middle" text-anchor="end" font-size="10"
                    >6000</text>
                <line x1="0" x2="360" y1="-400" y2="-400" stroke="black" stroke-dasharray="3"/>
                <text x="-5" y="-400" dominant-baseline="middle" text-anchor="end" font-size="10"
                    >8000</text>
                <line x1="0" x2="360" y1="-500" y2="-500" stroke="black" stroke-dasharray="3"/>
                <text x="-5" y="-500" dominant-baseline="middle" text-anchor="end" font-size="10"
                    >10000</text>
                <rect x="10" y="-462.90000000000003" width="20" height="462.90000000000003"
                    fill="blue"/>
                <text x="20" y="10" text-anchor="middle" font-size="10">15</text>
                <rect x="40" y="-422.6" width="20" height="422.6" fill="blue"/>
                <text x="50" y="10" text-anchor="middle" font-size="10">85</text>
                <rect x="70" y="-340.95000000000005" width="20" height="340.95000000000005"
                    fill="blue"/>
                <text x="80" y="10" text-anchor="middle" font-size="10">9</text>
                <rect x="100" y="-192.95000000000002" width="20" height="192.95000000000002"
                    fill="blue"/>
                <text x="110" y="10" text-anchor="middle" font-size="10">11</text>
                <rect x="130" y="-129.1" width="20" height="129.1" fill="blue"/>
                <text x="140" y="10" text-anchor="middle" font-size="10">12</text>
                <rect x="160" y="-113.5" width="20" height="113.5" fill="blue"/>
                <text x="170" y="10" text-anchor="middle" font-size="10">13</text>
                <rect x="190" y="-88.95" width="20" height="88.95" fill="blue"/>
                <text x="200" y="10" text-anchor="middle" font-size="10">24</text>
                <rect x="220" y="-53.2" width="20" height="53.2" fill="blue"/>
                <text x="230" y="10" text-anchor="middle" font-size="10">80</text>
                <rect x="250" y="-38.550000000000004" width="20" height="38.550000000000004"
                    fill="blue"/>
                <text x="260" y="10" text-anchor="middle" font-size="10">32</text>
                <rect x="280" y="-28.150000000000002" width="20" height="28.150000000000002"
                    fill="blue"/>
                <text x="290" y="10" text-anchor="middle" font-size="10">84</text>
                <rect x="310" y="-23.25" width="20" height="23.25" fill="blue"/>
                <text x="320" y="10" text-anchor="middle" font-size="10">81</text>
                <rect x="340" y="-17" width="20" height="17" fill="blue"/>
                <text x="350" y="10" text-anchor="middle" font-size="10">83</text>
                <line x1="0" x2="360" y1="0" y2="0" stroke="black" stroke-linecap="square"/>
                <line x1="0" x2="0" y1="0" y2="-500" stroke="black" stroke-linecap="square"/>
                <text x="180" y="25" text-anchor="middle" font-size="15">Paper number</text>
                <text x="180" y="-525" text-anchor="middle" font-size="20">Prevalence of federalism
                    by paper</text>
                <text x="-40" y="-250" text-anchor="middle" writing-mode="tb" font-size="15"
                    >Instances of federalism</text>
            </svg>

            <pre class="language-xml"><code><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:math="http://www.w3.org/2005/xpath-functions/math" xmlns="http://www.w3.org/2000/svg"
    exclude-result-prefixes="xs math" version="3.0">
    <xsl:output omit-xml-declaration="no" include-content-type="no" indent="yes"/>
    <!-- ================================================================ -->
    <!-- Stylesheet variables                                             -->
    <!-- ================================================================ -->
    <xsl:variable name="barWidth" as="xs:integer" select="20"/>
    <xsl:variable name="interbarSpacing" as="xs:double" select="$barWidth div 2"/>
    <xsl:variable name="maxWidth" as="xs:double"
        select="count(//paper) * ($barWidth + $interbarSpacing)"/>
    <xsl:variable name="maxHeight" as="xs:double" select="10000"/>
    <xsl:variable name="yScale" as="xs:double" select=".05"/>
    <!-- ================================================================ -->
    <!-- Templates                                                        -->
    <!-- ================================================================ -->
    <xsl:template match="/">
        <svg
            viewBox="-100, -{($maxHeight * $yScale) + 50}, {$maxWidth + 100}, {($maxHeight * $yScale) + 100}">
            <!-- ======================================================== -->
            <!-- Ruling lines                                             -->
            <!-- ======================================================== -->
            <xsl:for-each select="0 to 5">
                <line x1="0" x2="{$maxWidth}" y1="-{. * .2 * $maxHeight * $yScale}"
                    y2="-{. * .2 * $maxHeight * $yScale}" stroke="black" stroke-dasharray="3"/>
                <text x="-5" y="-{. * .2 * $maxHeight * $yScale}" dominant-baseline="middle"
                    text-anchor="end" font-size="10">
                    <xsl:value-of select=". * .2 * $maxHeight"/>
                </text>
            </xsl:for-each>
            <!-- ======================================================== -->
            <!-- Papers                                                   -->
            <!-- ======================================================== -->
            <xsl:apply-templates select="//paper">
                <xsl:sort select="descendant::federalism ! normalize-space() ! string-length() => sum()" order="descending"/>
            </xsl:apply-templates>
            <!-- ======================================================== -->
            <!-- Axes                                                     -->
            <!-- ======================================================== -->
            <line x1="0" x2="{$maxWidth}" y1="0" y2="0" stroke="black" stroke-linecap="square"/>
            <line x1="0" x2="0" y1="0" y2="-{$maxHeight * $yScale}" stroke="black"
                stroke-linecap="square"/>
            <!-- ======================================================== -->
            <!-- Axis and graph labels                                    -->
            <!-- ======================================================== -->
            <text x="{$maxWidth div 2}" y="25" text-anchor="middle" font-size="15">Paper number</text>
            <text x="{$maxWidth div 2}" y="-{($maxHeight * $yScale) + 25}" text-anchor="middle" font-size="20"
                >Prevalence of federalism by paper</text>
            <text x="-40" y="-{($maxHeight * $yScale) div 2}" text-anchor="middle" writing-mode="tb" font-size="15"
                >Instances of federalism</text>
        </svg>
    </xsl:template>
    <xsl:template match="paper">
        <!-- ============================================================ -->
        <!-- Template variables for positioning                           -->
        <!-- ============================================================ -->
        <xsl:variable name="xPos" as="xs:double"
            select="(position() - 1) * ($barWidth + $interbarSpacing) + $interbarSpacing"/>
        <xsl:variable name="yPos" as="xs:double"
            select="descendant::federalism ! normalize-space() ! string-length() => sum() * $yScale"/>
        <!-- ============================================================ -->
        <!-- Bar and bar label                                            -->
        <!-- ============================================================ -->
        <rect x="{$xPos}" y="-{$yPos}" width="{$barWidth}" height="{$yPos}" fill="blue"/>
        <text x="{$xPos + $interbarSpacing}" y="10" text-anchor="middle" font-size="10">
            <xsl:value-of select="@no"/>
        </text>
    </xsl:template>
</xsl:stylesheet>]]></code></pre>
        </section>
        <section>
            <h3>Using the <code class="language-xquery">normalize-space()</code> and
                <code class="language-xquery">string-length()</code> functions</h3>
            <p>We used XPath to find the total character count within <em>all the
                    <code class="language-xml">&lt;federalism&gt;</code> descendants</em> of each
                paper. We start by feeding each <code class="language-xml">&lt;federalism&gt;</code>
                element into <code class="language-xquery">normalize-space()</code> using the bang
                operator, which operates over each element, one-by-one.
                <code class="language-xquery">normalize-space()</code>, which removes sequences of
                whitespaces inside the input. This means that if a
                <code class="language-xml">&lt;federalism&gt;</code> element has newline characters
                and lots of leading whitespace as a result of pretty-printing, XPath will ignore it.
                From here, we use <code class="language-xquery">string-length()</code> to get the
                character count, now that extraneous whitespace has been removed. Weâ€™ve been
                operating over each <code class="language-xml">&lt;federalism&gt;</code> descendant
                with the bang because these functions can only take one argument at a time. We use
                the arrow operator to feed <em>all</em> the string lengths into
                <code class="language-xquery">sum()</code>, which gets us the total number of
                whitespace-normalized characters in the
                <code class="language-xml">&lt;federalism&gt;</code> descendants of our paper. You
                might have taken a different approach here, as with most tasks in this class,
                thereâ€™s more than one way to reach a working solution. Other approaches may, for
                example, have used <code class="language-xquery">string-join()</code> to join the
                contents of <code class="language-xml">&lt;federalism&gt;</code> elements before
                performing whitespace normalization and finding the string length.</p>
        </section>
    </body>
</html>
