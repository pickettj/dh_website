<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
    <!--#set var="title" value="XSLT assignment #3" -->
    <!--#config timefmt="%Y-%m-%dT%X%z" -->
    <head>
        <title><!--#echo var="title" --></title>
        <link rel="stylesheet" type="text/css" href="http://www.obdurodon.org/css/style.css" />
        <!--#include virtual="inc/dh-header.html" -->
        <style type="text/css">
            body * {
              line-height: 1.5 !important;
            }</style>
    </head>
    <body class="line-numbers">
        <!--#include virtual="inc/dh-boilerplate.html" -->
        <h3>The assignment</h3>
        <p>Transform the <cite>Skyrim</cite> XML to HTML in way that uses an external CSS stylesheet
            to style the in-line elements. What you should do, then, is:</p>
        <ul>
            <li>Create an XSLT stylesheet that transforms the
                <code class="language-xml">&lt;body&gt;</code> element and its contents into
                HTML.</li>
            <li>The resulting HTML should style the six types of in-line elements listed in the
                original assignment. At least some of those styles should be set using
                <code class="language-xml">&lt;span&gt;</code> elements with the
                <code class="language-xquery">@class</code> attribute.</li>
            <li>Create a CSS file, linked to your output HTML, that specifies how to style the
                output document.</li>
        </ul>
        <h3>Our solution</h3>
        <p>Here is one solution (we process both the <code class="language-xml">&lt;cover&gt;</code>
            and the <code class="language-xml">&lt;body&gt;</code>; it’s fine if you process just
            the <code class="language-xml">&lt;body&gt;</code> and skip the
            <code class="language-xml">&lt;cover&gt;</code> along with the
            <code class="language-xml">&lt;cast&gt;</code>):</p>
        <pre class="language-xml"><code>&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/1999/xhtml"
    xmlns:math="http://www.w3.org/2005/xpath-functions/math" exclude-result-prefixes="#all"
    version="3.0">
    &lt;xsl:output method="xhtml" html-version="5" omit-xml-declaration="no" include-content-type="no"
        indent="yes"/>
    &lt;xsl:template match="/"&gt;
        &lt;html&gt;
            &lt;head&gt;
                &lt;title&gt;Skyrim&lt;/title&gt;
                &lt;link rel="stylesheet" type="text/css" href="skyrim.css"/&gt;
            &lt;/head&gt;
            &lt;body&gt;
                &lt;xsl:apply-templates/&gt;
            &lt;/body&gt;
        &lt;/html&gt;
    &lt;/xsl:template&gt;
    &lt;xsl:template match="skyrim"&gt;
        &lt;xsl:apply-templates select="* except cast"/&gt;
    &lt;/xsl:template&gt;
    &lt;xsl:template match="title"&gt;
        &lt;h1&gt;
            &lt;xsl:apply-templates/&gt;
        &lt;/h1&gt;
    &lt;/xsl:template&gt;
    &lt;xsl:template match="attribution"&gt;
        &lt;h2&gt;
            &lt;xsl:apply-templates/&gt;
        &lt;/h2&gt;
    &lt;/xsl:template&gt;
    &lt;xsl:template match="subtitle"&gt;
        &lt;h3&gt;
            &lt;xsl:apply-templates/&gt;
        &lt;/h3&gt;
    &lt;/xsl:template&gt;
    &lt;xsl:template match="author"&gt;
        &lt;em&gt;
            &lt;xsl:apply-templates/&gt;
        &lt;/em&gt;
    &lt;/xsl:template&gt;
    &lt;xsl:template match="paragraph"&gt;
        &lt;p&gt;
            &lt;xsl:apply-templates/&gt;
        &lt;/p&gt;
    &lt;/xsl:template&gt;
    &lt;xsl:template match="QuestEvent"&gt;
        &lt;span class="QuestEvent"&gt;
            &lt;xsl:apply-templates/&gt;
        &lt;/span&gt;
    &lt;/xsl:template&gt;
    &lt;xsl:template match="QuestItem"&gt;
        &lt;span class="QuestItem"&gt;
            &lt;xsl:apply-templates/&gt;
        &lt;/span&gt;
    &lt;/xsl:template&gt;
    &lt;xsl:template match="character"&gt;
        &lt;span class="character"&gt;
            &lt;xsl:apply-templates/&gt;
        &lt;/span&gt;
    &lt;/xsl:template&gt;
    &lt;xsl:template match="epithet"&gt;
        &lt;span class="epithet"&gt;
            &lt;xsl:apply-templates/&gt;
        &lt;/span&gt;
    &lt;/xsl:template&gt;
    &lt;xsl:template match="faction"&gt;
        &lt;span class="faction"&gt;
            &lt;xsl:apply-templates/&gt;
        &lt;/span&gt;
    &lt;/xsl:template&gt;
    &lt;xsl:template match="location"&gt;
        &lt;span class="location"&gt;
            &lt;xsl:apply-templates/&gt;
        &lt;/span&gt;
    &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</code></pre>
        <p>Creating a link to the external CSS means creating a
            <code class="language-xml">&lt;link&gt;</code> element. This is no different than
            creating the <code class="language-xml">&lt;title&gt;</code> element or any other
            element that we want to write into the output. In this case our output HTML contains a
            link to an external CSS stylesheet called <q>skyrim.css</q>, which looks like:</p>
        <pre class="language-css"><code>span.QuestEvent{
  color:red;
}
span.QuestItem{
  color:blue;
}
span.character{
  color:green;
}
span.epithet{
  color:orange;
}
span.faction{
  color:purple;
}
span.location{
  color:fuchsia;
}</code></pre>
        <p>The <code class="language-xquery">except</code> operator in
            <code class="language-xml">&lt;xsl:apply-templates select="* except cast"/&gt;</code> is
            a convenient way of saying <q>apply templates to all of the children of the current
                context (the <code class="language-xml">&lt;skyrim></code> root element) except any
                <code class="language-xml">&lt;cast&gt;</code> children</q>. You can read about
            <code class="language-xquery">except</code> at the top of Kay, p. 631. For this
            assignment it’s fine to have applied templates only to the
            <code class="language-xml">&lt;body&gt;</code> instead.</p>
        <p>Transforming the input <code class="language-xml">&lt;paragraph&gt;</code> elements to
            HTML <code class="language-xml">&lt;p&gt;</code> elements is vital. If you don’t do
            that, your output will run together as if it were one long paragraph, which isn’t what
            you want. Within the paragraphs, the XSLT transforms each of the six types of inline
            elements into an HTML <code class="language-xml">&lt;span&gt;</code> element with a
            <code class="language-xquery">@class</code> attribute. The CSS contains six selectors
            that match <code class="language-xml">&lt;span&gt;</code> elements, one for each
            possible value of the <code class="language-xquery">@class</code> attribute.</p>
        <h3>Refining the CSS</h3>
        <p>A CSS selector like <code class="language-css">span.QuestItem</code> matches a
            <code class="language-xml">&lt;span&gt;</code> element with a
            <code class="language-xquery">@class</code> attribute that has the value
                <q>QuestItem</q>. A CSS selector can also match just the element name (e.g., a
            selector <code class="language-xquery">span</code> will match <em>all</em>
            <code class="language-xml">&lt;span&gt;</code> elements). It can also match just the
            <code class="language-xquery">@class</code>, so that a selector like
            <code class="language-css">.QuestItem</code>, which has the period and
            <code class="language-xquery">@class</code> value but not the element name, will match
                <em>any element</em> that has a <code class="language-xquery">@class</code>
            attribute set to the specified value. This means that, for example, you could use a
            single rule of this type to assign the same styling not only to
            <code class="language-xml">&lt;span&gt;</code> elements with a specified
            <code class="language-xquery">@class</code> value, but also
            <code class="language-xml">&lt;p&gt;</code> elements,
            <code class="language-xml">&lt;em&gt;</code> elements,
            <code class="language-xml">&lt;h1&gt;</code> elements, or any other element type, as
            long as it has the same specified value for the
            <code class="language-xquery">@class</code> attribute. In our transformation we’ve
            encoded a <code class="language-xquery">@class</code> attribute only for
            <code class="language-xml">&lt;span&gt;</code> elements, so the result of applying a
            particular style to all elements with a specific value of the
            <code class="language-xquery">@class</code> attribute would be the same as those of
            applying that style only to <code class="language-xml">&lt;span&gt;</code> elements with
            that <code class="language-xquery">@class</code> attribute value. In a larger project
            that makes broader use of the <code class="language-xquery">@class</code> attribute,
            though, a selector that specifies only a class value, without restricting the rules to a
            specific element type with that class value, can help consolidate a large CSS stylesheet
            into a smaller one.</p>
        <h3>Refining the XSLT</h3>
        <p>Our XSLT above has separate rules for six types of in-line elements that all do a version
            of the same thing: they create an HTML <code class="language-xml">&lt;span&gt;</code>
            element with a <code class="language-xquery">@class</code> attribute, the value of which
            is the same as the <dfn>generic identifier</dfn> (abbreviated GI; this is the technical
            term for the name of an element) of the element that was matched in the original XML.
            For example, a <code class="language-xml">&lt;QuestEvent&gt;</code> element in the input
            XML is converted to <code class="language-xml">&lt;span class="QuestEvent"&gt;</code> in
            the output HTML. Using <dfn>attribute value templates</dfn> (AVT; see <a
                href="avt.xhtml">http://dh.obdurodon.org/avt.xhtml</a>), we can exploit the
            similarities and consolidate those six rules into one, replacing the six separate rules
            with the following one:</p>
        <pre class="language-xml"><code>&lt;xsl:template match="QuestEvent | QuestItem | character | epithet | faction | location"&gt;
  &lt;span class="{name()}"&gt;
    &lt;xsl:apply-templates/&gt;
  &lt;/span&gt;
&lt;/xsl:template&gt;</code></pre>
        <p>We use the <dfn>union operator</dfn> (<code class="language-xquery">|</code>) to create a
            single template that will match any of those six types of elements, create an HTML
            <code class="language-xml">&lt;span&gt;</code> element with a
            <code class="language-xquery">@class</code> attribute, and set the value of that
            attribute to the GI of the original XML element that is being matched at the moment. The
            XPath <code class="language-xquery">name()</code> function returns the name of an
            element, and since the current context is the element currently being processed, each
            time this template processes an element it can retrieve the GI for that particular
            element instance. The function has to be surrounded by curly braces for reasons
            explained in our <a href="avt.xhtml">AVT documentation</a>.</p>
        <p>We can improve on that still further because we want to process all descendant elements
            of paragraphs, and not just these six types, the same way:</p>
        <pre class="language-xml"><code>&lt;xsl:template match="paragraph//*"&gt;
  &lt;span class="{name()}"&gt;
    &lt;xsl:apply-templates/&gt;
  &lt;/span&gt;
&lt;/xsl:template&gt;</code></pre>
        <p>This revision produces the same output as the version above, but it has the advantage of
            matching all element descendants of paragraphs without having to specify their types in
            advance.</p>
        <p>One of the enhancements we suggested in the assignment was that you could style input
            nodes on the basis of not only the element type, but also attribute values. For example,
            instead of styling all <code class="language-xml">&lt;faction&gt;</code> elements the
            same way, using the same value of the <code class="language-xquery">@class</code>
            attribute, you can use
            <code class="language-xml">&lt;xsl:template match="faction[@ref='MythicDawn']"&gt;</code>
            to match <code class="language-xml">&lt;faction&gt;</code> elements only if they have a
            <code class="language-xquery">@ref</code> attribute with the value <q>MythicDawn</q>.
            The AVT strategy we describe above to use a common template rule to treat different
                <em>element types</em> similarly could to be used to set the value of the HTML
            <code class="language-xquery">@class</code> attribute according to not just the GI of
            the element being transformed, but also the value of, say, <em>its
                <code class="language-xquery">@ref</code> attribute</em>. That is, we could use one
            template to convert <code class="language-xml">&lt;faction ref="MythicDawn"&gt;</code>
            into <code class="language-xml">&lt;span class="MythicDawn"&gt;</code> and
            <code class="language-xml">&lt;faction ref="DarkBrotherhood"&gt;</code> into
            <code class="language-xml">&lt;span class="DarkBrotherhood"&gt;</code>. A template that
            assigns a different class to each <code class="language-xml">&lt;faction&gt;</code>
            element in the input XML file according to the value of its
            <code class="language-xquery">@ref</code> attribute might look like:</p>
        <pre class="language-xml"><code class="language-xml">&lt;xsl:template match="faction"&gt;
    &lt;span class="{@ref}"&gt;
        &lt;xsl:apply-templates/&gt;
    &lt;/span&gt;
&lt;/xsl:template&gt;</code></pre>
        <p>This template matches all <code class="language-xml">&lt;faction&gt;</code> elements in
            the input XML, regardless of the value of their
            <code class="language-xquery">@ref</code> attribute, and converts them into HTML
            <code class="language-xml">&lt;span&gt;</code> elements with a
            <code class="language-xquery">@class</code> attribute. It determines the value of the
            <code class="language-xquery">@class</code> attribute, though, by copying it from the
            <code class="language-xquery">@ref</code> attribute of the input
            <code class="language-xml">&lt;faction&gt;</code> element. The CSS stylesheet would, of
            course, have to be modified, since the example above does not include any selectors for
            <code class="language-xml">&lt;span&gt;</code> elements with any of these new
            <code class="language-xquery">@class</code> attribute values.</p>
        <h3>Dereferencing <code class="language-xml">&lt;faction&gt;</code> elements</h3>
        <p>We also invited you to stretch your XPath skills along the following lines:</p>
        <blockquote>
            <p>In the header (the <code class="language-xml">&lt;cast&gt;</code> element) some
                factions are described (with an <code class="language-xquery">@alignment</code>
                attribute) as <q>evil</q>, <q>good</q>, or <q>neutral</q>. You can write a matching
                rule that will dereference the <code class="language-xquery">@ref</code> attribute
                on, say,
                <code class="language-xml">&lt;faction ref="MythicDawn"&gt;assassins&lt;/faction&gt;</code>,
                look up whether this is an evil, good, or neutral faction, and set the
                <code class="language-xquery">@class</code> value of the HTML
                <code class="language-xml">&lt;span&gt;</code> that you are creating accordingly.
                You could make all good factions one color and all evil factions a different color,
                letting XPath look up the moral alignment of a faction for you.</p>
        </blockquote>
        <p>When you match a <code class="language-xml">&lt;faction&gt;</code> element in the input
            XML, it might say, for example,
            <code class="language-xml">&lt;faction ref="blades"&gt;</code>. Meanwhile, inside the
            <code class="language-xml">&lt;cast&gt;</code> element at the top there is an element
            that establishes the alignment of the <q>blades</q> faction as <q>good</q>:</p>
        <pre class="language-xml"><code class="language-xml">&lt;faction id="blades" alignment="good"/&gt;</code></pre>
        <p>You can <dfn>deference</dfn> (‘look up’) an in-line
            <code class="language-xml">&lt;faction&gt;</code> with a
            <code class="language-xquery">@ref</code> attribute value of <q>blades</q> by looking up
            the <code class="language-xml">&lt;faction&gt;</code> element inside the
            <code class="language-xml">&lt;cast&gt;</code> that has an
            <code class="language-xquery">@id</code> attribute with the same value, and you can then
            retrieve the value of the <code class="language-xquery">@alignment</code> attribute
            associated with that entry. For example:</p>
        <pre class="language-xml"><code>&lt;xsl:template match="faction"&gt;
  &lt;span class="{//cast/faction[@id = current()/@ref]/@alignment}"/&gt;
&lt;/xsl:template&gt;</code></pre>
        <p>The preceding template matches any <code class="language-xml">&lt;faction&gt;</code>
            element and creates an HTML <code class="language-xml">&lt;span&gt;</code> element with
            a <code class="language-xquery">@class</code> attribute. The value of the
            <code class="language-xquery">@class</code> attribute is determined by retrieving all of
            the <code class="language-xml">&lt;faction&gt;</code> elements in the
            <code class="language-xml">&lt;cast&gt;</code> and finding the one whose
            <code class="language-xquery">@id</code> attribute matches the
            <code class="language-xquery">@ref</code> attribute of the inline
            <code class="language-xml">&lt;faction&gt;</code> element (in the
            <code class="language-xml">&lt;body&gt;</code>) currently being processed. We have to
            use the XSLT <code class="language-xquery">current()</code> function to refer to the
            inline <code class="language-xml">&lt;faction&gt;</code> element in the
            <code class="language-xml">&lt;body&gt;</code> currently being processed, rather than
            the dot, because the dot gets the current <em>XPath</em> context, and within the XPath
            we’re evaluating, that’s one or another
            <code class="language-xml">&lt;faction&gt;</code> element in the
            <code class="language-xml">&lt;cast&gt;</code> element. The
            <code class="language-xquery">current()</code> function, on the other hand, returns the
            current <em>XSLT</em> context, which is the inline
            <code class="language-xml">&lt;faction&gt;</code> element that our template has matched,
            and a <code class="language-xml">&lt;faction&gt;</code> element that has a
            <code class="language-xquery">@ref</code> attribute must be in the
            <code class="language-xml">&lt;body&gt;</code>.</p>
        <!--<p>There’s also a way to achieve this result without using an AVT. If you know that there a
            limited number of possible alignments, you can write:</p>
        <pre>&lt;xsl:template match="//body//faction[@ref=//cast/faction[@alignment='good']/@id]"&gt;
  &lt;span class="good"&gt;
    &lt;xsl:apply-templates/&gt;
  &lt;/span&gt;
&lt;/xsl:template&gt;
&lt;xsl:template match="//body//faction[@ref=//cast/faction[@alignment='evil']/@id]"&gt;
  &lt;span class="evil"&gt;
    &lt;xsl:apply-templates/&gt;
  &lt;/span&gt;
&lt;/xsl:template&gt;
&lt;xsl:template match="//body//faction[@ref=//cast/faction[@alignment='neutral']/@id]"&gt;
  &lt;span class="neutral"&gt;
    &lt;xsl:apply-templates/&gt;
  &lt;/span&gt;
&lt;/xsl:template&gt;</pre>
        <p>The value of the <code>@match</code> attribute of the first template rule says (take a
            deep breath): <q>match any <code>&lt;faction&gt;</code> element in the
                    <code>&lt;body&gt;</code> that has a <code>@ref</code> attribute whose value is
                equal to the value of the <code>@id</code> attribute of any
                    <code>&lt;faction&gt;</code> element in the <code>&lt;cast&gt;</code> that has
                an alignment attribute with the value of <q>good</q></q>. Okay, let’s look at an
            example: If the <code>&lt;body&gt;</code> contains <code>&lt;faction
                ref="blades"&gt;</code>, the first template above would match it because it would
            look through all of the <code>&lt;faction&gt;</code> elements in the
                <code>&lt;cast&gt;</code> to see whether there was one with an
                <code>@alignment</code> attribute with the value <q>good</q> that had an
                <code>@id</code> attribute with the value <q>blades</q> (that is, with a value that
            matched the value of the <code>@ref</code> attribute of the <code>&lt;faction&gt;</code>
            element inside the <code>&lt;body&gt;</code> that is currently being processed). The
            other templates would also look for matches with other values of the
                <code>@alignment</code> attribute, but only this one would match, so only this one
            would step in to process the element. As a result, the output HTML would wind up with
                <code>&lt;span class="good"&gt;blades&lt;/span&gt;</code>.</p>-->
        <h3>One more complication</h3>
        <p>Inside the <code class="language-xml">&lt;body&gt;</code> element, the
            <code class="language-xml">&lt;faction&gt;</code> elements have
            <code class="language-xquery">@ref</code> attributes that point to a single faction. The
            situation is different with the <code class="language-xml">&lt;character&gt;</code>
            elements inside the <code class="language-xml">&lt;body&gt;</code>, though, For example,
            there is one place where the XML reads:</p>
        <pre class="language-xml"><code>&lt;character ref="MartinSeptim hero Jauffre"&gt;they&lt;/character&gt;</code></pre>
        <p>Trying to apply the strategy above will fail here because there is no
            <code class="language-xml">&lt;character&gt;</code> element in the
            <code class="language-xml">&lt;cast&gt;</code> element that has an
            <code class="language-xquery">@id</code> attribute with the value <q>MartinSeptim hero
                Jauffre</q>. The problem is that this <code class="language-xquery">@ref</code>
            attribute points to <em>three separate
                <code class="language-xml">&lt;character&gt;</code> elements</em> inside the
            <code class="language-xml">&lt;cast&gt;</code> element, a situation our templates above
            cannot handle.</p>
        <p>One approach to this problem uses the XPath
            <code class="language-xquery">tokenize()</code> function. It would let you break the
            value <q>MartinSeptim hero Jauffre</q> into three parts and look each of them up
            individually. What you would then do, though, is a separate question: MartinSeptum and
            Jauffre both have <q>good</q> alignment and the hero has <q>neutral</q> alignment, so
            how should you style the word <q>they</q> with CSS? In a previous semester one student
            resolved this by dilemma by using parenthesized content, instead of color coding, that
            is, by rendering <q>they (good) (neutral) (good)</q>. The advantage of this solution is
            that a string of text can have only a single color, but you can have multiple
            parenthesized annotations.<!-- The strategy employed in this solution was:--></p>
        <!--       <pre>&lt;xsl:template match="body//character"&gt;
  &lt;xsl:apply-templates/&gt;
  &lt;xsl:apply-templates select="for $i in @ref return //character[@id/contains($i,.)]/@alignment"/&gt;
&lt;/xsl:template&gt;
&lt;xsl:template match="@alignment"&gt;
  &lt;xsl:text&gt; (&lt;/xsl:text&gt;
  &lt;xsl:value-of select="."/&gt;
  &lt;xsl:text&gt;)&lt;/xsl:text&gt;
&lt;/xsl:template&gt;</pre>
        <p>This is very edgy XPath, and a brilliant way to work around not having
                <code>tokenize()</code> in your toolkit. It uses an XPath <code>for</code>
            expression to get the value of the <code>@ref</code> attribute into a variable
                <code>$i</code>, although there is only one <code>@ref</code> attribute, so there’s
            really only one value and you don’t need to iterate over it. Had you already learned
            about XSLT variables (<code>&lt;xsl:variable&gt;</code> elements), you could have
            accomplished the same result that way, but this exploitation of <code>for</code> was a
            clever dodge. This XPath then returns all <code>&lt;character&gt;</code> elements that
            have an <code>@id</code> attribute whose value is contained by the value of the
                <code>@ref</code> attribute of the <code>&lt;character&gt;</code> element we’re
            processing at the moment. That is, it retrieves all of the
                <code>&lt;character&gt;</code> elements in the <code>&lt;cast&gt;</code> (those are
            the only <code>&lt;character&gt;</code> elements that have <code>@id</code> attributes)
            and checks whether the value of the <code>@ref</code> attribute we’re looking at
            contains their <code>@id</code> values. This means, for example, that when we look at
            the <code>&lt;character id="Jauffre" loyalty="empire blades"
                alignment="good"/&gt;</code>, we find that the value of the <code>@ref</code>
            attribute, which is <q>MartinSeptim hero Jauffre</q>, does contain the value of the
                <code>@id</code> attribute, which is just <q>Jauffre</q>. We therefore return the
            value of the <code>@alignment</code> attribute of <code>&lt;character id="Jauffre"
                loyalty="empire blades" alignment="good"/&gt;</code>, that is, <q>good</q>. The
            first template rule says to apply templates to that <code>@alignment</code> attribute,
            and the second template rule does that processing by outputting the value of the
            attribute set off by spaces and surrounded by parentheses.</p>-->
    </body>
</html>
